{"meta":{"title":"猪猪侠","subtitle":"做一只想飞的猪","description":"一个猪窝","author":"Jiaxi Zhang","url":"https://shen-yu.gitee.io","root":"/"},"pages":[{"title":"about","date":"2020-03-06T12:45:58.000Z","updated":"2020-03-07T07:08:31.272Z","comments":true,"path":"about/index.html","permalink":"https://shen-yu.gitee.io/about/index.html","excerpt":"","text":"A Coder, Live in Hangzhou, China 姓名：张嘉喜现居：杭州github：omgggboyQQ：171496079微信：m171496079————————————————————————————浙江大学软件工程硕士在读，硕士一年级。目前在浙江大学计算机辅助设计与图形学(cad&amp;cg)国家重点实验室主要研究数据可视化java初学，qml入门 博客拿来记录学习和分享生活，欢迎交流"},{"title":"tags","date":"2020-03-06T12:46:12.000Z","updated":"2020-03-06T12:59:06.971Z","comments":true,"path":"tags/index.html","permalink":"https://shen-yu.gitee.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-03-06T12:46:38.000Z","updated":"2020-03-06T12:58:13.714Z","comments":true,"path":"categories/index.html","permalink":"https://shen-yu.gitee.io/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2020-03-06T12:46:23.000Z","updated":"2020-03-06T12:46:23.862Z","comments":true,"path":"friends/index.html","permalink":"https://shen-yu.gitee.io/friends/index.html","excerpt":"","text":""}],"posts":[{"title":"java的基本程序设计结构","slug":"javav1ch03","date":"2020-03-18T14:01:21.375Z","updated":"2020-03-19T01:21:13.398Z","comments":true,"path":"2020/ck7y2ku640001ay96cr7mfmkc/","link":"","permalink":"https://shen-yu.gitee.io/2020/ck7y2ku640001ay96cr7mfmkc/","excerpt":"","text":"最简单的Java程序 java区分大小写 java应用程序的全部内容必须放置在类中 每个句子由分号结尾，回车不是句子的结尾 注释 单行注释// 多行注释/* */ 自动生成文档/** */ 基本数据类型整形 int 4字节 short 2字节 long 8字节 byte 1字节 浮点型 float 4字节 double 8字节 char类型 常用字符采用单字节编码，，而另一些字符而需要两个或者更多个字节。在Java中采用UTF-16所以占用2字节 boolean（布尔）类型 1位 只有0和1 1字节 1字节是计算机处理最小单位 4字节 java虚拟机规范里规定 变量 命名允许字符，数字和字母。字母包括’A’ ~ ‘Z’、 ‘a’ ~ ‘z’、’_’、’$’或者某种语言中表示字母的任何Unicode字符。数字包括’0’ ~ ‘9’和某种语言中表示数字的任何Unicode字符。 利用关键字final指示常量 声明一个变量后，必须用赋值语句对变量进行显式初始化，千万不要使用未初始化对变量 运算符 各运算符的优先级 各数据类型之间的强制类型转换 字符串 字符串的不可变属性 字符串类的一些常用接口 输入与输出 读取输入 格式化输出 文件的输入与输出 流程控制 if else while do while for break 提供了带标签选项 switch continue 提供了带标签选项 大数值 满足更高精度要求的计算 运算需要使用类内方法 数组 for each 数据变量是一种引用 多维数组 不规则数组 XMind: ZEN - Trial Version","categories":[],"tags":[]},{"title":"数据链路层","slug":"Data-Link-Layer","date":"2020-03-08T12:28:52.720Z","updated":"2020-03-08T12:28:52.720Z","comments":true,"path":"2020/ck7y2ku5j0000ay96hmi3bgd8/","link":"","permalink":"https://shen-yu.gitee.io/2020/ck7y2ku5j0000ay96hmi3bgd8/","excerpt":"","text":"使用点对点信道的数据链路层点对点信道的数据链路层在进行通信时的主要步骤如下 1.结点A的数据链路层把网络层交下来的IP数据报添加首部和尾部封装成帧 2.结点A把封装好的帧发生发生给结点B的数据链路层 3.若结点B的数据链路层收到的帧无差错，则从收到的帧中提取 出IP数据报交给上面的网络层；否则丢弃这个帧 三个基本问题 封装成帧 在一段数据的前后分布添加首部和尾部，这样就构成了一个帧 MTU(Maximum Transfer Unit)最大传送单元是指帧的数据部分长度上限,默认值1500字节 透明传输 “透明”表示某一个实际存在的事物看起来却好像不存在。这些数据就“看不见”数据链路层有什么防碍数据传输的东西。 为解决透明传输问题，发送端的数据链路层在出现控制字符“SOH”和“EOT”之前加入转义字符“ESC”，在接收端的数据链路层把数据运往网络层之前删除这些之前插入的转义字符。这种方法叫字节填充或字符填充。 差错检测 误码率 在一段时间内，传输错误的比特占所传输比特总数的比率 循环冗余检测CRC(Cyclic Redundancy Check) 在每组数据后面增加n位冗余码供差错检测 帧检验序列FCS(Frame Check Sequence) CRC是一种检错方法，而FSC是添加在数据后面的冗余码，在检错方法上可以选用CRC，但也可以不选用CRC 数据链路层若仅仅使用CRC差错检测技术，则只能做到对帧但无差错接收 传输差错 比特差错 比特在传输过程中可能会产生差错，1变0，0变1 没有比特差错 帧丢失 帧重复 帧失序 对于通信质量较差但无线传输链路，数据链路层协议使用确认和重传机制，数据链路层向上提供可靠传输的服务 点对点协议PPP(Point -to-Point Protocol)特点 应该满足的需求 简单 封装成帧 透明性 多种网络层协议 多种类型链路 差错检测 检测连接状态 最大传送单元 网络层地址协商 数据压缩协商 组成 一个将IP数据报封装到串行链路的方法。PPP既支持异步链路（无奇偶检验的8比特数据），也支持面向比特的同步链路。IP数据报在PPP帧中就是信息部分。这个信息部分长度受最大传送单元MTU限制 一个用来建立、配置和测试数据链路连接的链路控制协议LCP(Link Control Protocol)。通信双方可以协商一些选项。在RFC 1661中定义了11种类型的LCP分组 一套网络控制协议NCP(Network Control Protocol),其中的每个协议支持不同的网络层协议，如IP、OSI的网络层、DECnet、以及AppleTalk等。 帧格式 各字段意义 首部的第一个字段和尾部的第二个字段F(Flag),规定为0x7E 首部中的字段A规定为0xFF，控制字段C规定为0x03。最初考虑以后再对这两个字段的值进行定义，但自今也没有给出。 PPP首部的第四个字段是2字节的协议字段。当协议字段为0x0021时，PPP帧的信息字段就是IP数据报。若为0xC021，则信息字段是PPP链路控制协议LCP的数据，而0x8021表示网络层的控制数据。 信息字段的长度是可变的，不超过1500字节 尾部中的第一个字段(2字节)是使用CRC的帧检验序列FCS 字节填充 当PPP使用异步传输时，他把转义符定义为0x7D，并使用字节填充 把信息字段中出现的每一个0x7E字节转变为2字节序列(0x7D,0x5E) 若信息字段中出现一个0x7D的字节(即出现了和转义字符一样的比特组合），则把0x7D转变为2字节序列(0x7D,0x5D) 若信息字段中出现ASCII码的控制符（即树枝小于0x20的字符），则在字符前面加上一个0x7D字节，同时把该字符的编码加以改变。例如，出现0x03就把它转变为2字节序列(0x7D,0x23) 零比特填充 PPP协议用在SONET/SDH链路时，使用同步传输（一连串的比特连续传送）而不是异步传输（逐个字符地传送） 在发送端，先扫描整个信息字段（通常用硬件实现，但也是可用软件实现，只是会慢些）。只要发现有5个连续1，则立即填入一个0.因此经过这个零比特填充后的数据，就可以保证在信息字段不会出现6个连续1。接收端在收到一个帧时，先找到标志字段F以确定一个帧的边界，接着再用硬件对其中的比特流进行扫描。每当发现5个连续1时，就把这5个连续1后的0删除，以还原成原来的信息比特流 工作状态 当用户拨号接入ISP后，就建立一条从用户个人电脑到ISP的物理连接。这时，用户个人电脑向ISP发送一系列的链路控制协议LCP分组（封装成多个PPP帧），以便建立LCP连接。这些分组以及其响应选择了将要使用的一些PPP参数。接着还要进行网络层配置，网络控制协议NCP给新接入的用户个人电脑分配一些临时的IP地址。这样，用户个人电脑就称为互联网上的一个有IP地址的主机了 使用广播信道的数据链路层局域网的数据链路层 局域网的优点 具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源 便于系统的扩展和逐渐演变，各设备的位置可灵活调节和改变 提高了系统的可靠性、可用性和生存性 局域网按网络拓扑分类 星形网 环形网 总线网 共享信道技术上的两种方法 静态划分信道 频分复用、时分复用、波分复用和码分复用等，用户只要分配到了信道就不会和其他用户发送冲突。但这种方法代价较高，不适合局域网使用 动态媒体接入控制 随机接入 随机接入的特点是所有的用户可随机地发送信息。但如果恰巧有两个或更多但用户在同一时刻发送信息，那么在共享媒体上就要产生碰撞（即发送了冲突），使得这些用户但发送都失败。因此，必须有解决碰撞的网络协议。 受控接入 受控接入的特点是用户不能随机地发送信息而必须服从一定的控制。这类的典型代表有分散控制的令牌环局域网和集中控制的多点线路探询（polling），或称为轮询。 IEEE802委员会曾把局域网的数据链路层拆成两个子层，即逻辑链路控制（LLC）子层（与传输媒体无关）和媒体接入控制子层（MAC）子层（与传输媒体有关）。但现在LLC子层已成历史。MAC（Medium Access Control）LLC（Logical Link Control） 计算机与外界局域网的通信要通过通信适配器（或网络适配器），它又称为网络接口卡或网卡。计算机的硬件地址就在适配器的ROM中 CSMA/CD协议 协议要点 多点接入 说明这是总线型网络，许多计算机以多点接入的方式连接在一个总线上 载波监听 载波监听就是检测信道。不管发送前，还是发送中，每个站都必须不停地检测信道 碰撞检测 就是“便发送边监听”，即适配器边发送数据边检测信道上的信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据 总结 准备发送 适配器从网络层获得一个分组，加上以太网的首部和尾部，以组成以太网帧，放入适配器的缓存中。但是发送之前，必须先检测信道 检测信道 若检测到信道忙，则应不停地检测，一直等待信道转为空闲。若检测到信道空闲，并在96比特时间内信道保持空闲（保证了帧间最小间隔），就发送这个帧。 在发送过程中仍不停地检测信道，即网络适配器要边发送边监听 发送成功：争用期内一直为检测到碰撞。这个帧肯定能够发送成功。发送完毕后，其他什么也不做。然后回到准备发送的状态。 发送失败：在争用期内检测到碰撞。这时立即停止发送数据，并按规定发送人为干扰信号。适配器接着执行指数退避算法，等待r倍512比特时间后，返回到检测信道。但若重传达16次仍不成功，则停止重传而向上报错 集线器 使用集线器物理上是星型网实际，在逻辑上仍然是一个总线网，各站使用的还是CSMA/CD协议 集线器有很多接口，很像一个多接口的转发器 集线器工作在物理层，工作只是简单地转发，不进行碰撞检测 集线器采用了专门的芯片，进行自适应串音回波抵消 以太网的MAC层（medium access control） MAC层的硬件地址 硬件地址又称为物理地址或MAC地址 MAC地址固化在适配器的ROM中 MAC帧的格式 第一个字段：6字节长的目的地址 第二个字段：6字节长的源地址 第三个字段：2字节长的类型字段 IP数据报：0x0800 Novell IPX：0x8137 第四个字段：长度在46到1500字节之间的数据字段 第五个字段：4字节的帧检验序列FCS（使用CRC检验） 扩展的以太网 使用集线器在物理层扩展以太网 交换式集线器常称为以太网交换机或第二层交换机（工作在数据链路层）。他就是一个多接口的网桥，而每个接口都直接与某台主机或另一个集线器相连，且工作在全双工方式。以太网交换机能同时连通许多对的接口，使每一对相互通信的主机都能像独占通信媒体那样，无碰撞地传输数据 XMind: ZEN - Trial Version","categories":[],"tags":[]},{"title":"我的博客诞生了","slug":"my-first-blog","date":"2020-03-06T14:23:32.565Z","updated":"2020-03-06T14:23:32.565Z","comments":true,"path":"2020/ck7y2ku680005ay96dsqre8ki/","link":"","permalink":"https://shen-yu.gitee.io/2020/ck7y2ku680005ay96dsqre8ki/","excerpt":"","text":"环境配置 macbook pro 2019 前期准备下载并安装 git node.js tips：如果下载速度过慢，可以找下国内镜像仓库npm的国内镜像https://npm.taobao.org/mirrors/上面这个网址里也有git的资源 安装hexo$ npm install -g hexo-cli github仓库建立仓库名必须满足：&lt;用户名&gt;.github.io github pages部署 安装hexo-deployer-gitnpm install hexo-deployer-git 修改配置文件_config.yml1234delpoy: type: git repo: https:github.com&#x2F;&lt;用户名&gt;&#x2F;&lt;用户名&gt;.github.io branch:gh-pages 运行hexo clean &amp;&amp; hexo deploy 查看你的github网站是否更改","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-03-06T10:01:43.506Z","updated":"2020-03-06T10:01:43.506Z","comments":true,"path":"2020/ck7y2ku660003ay966a2q7who/","link":"","permalink":"https://shen-yu.gitee.io/2020/ck7y2ku660003ay966a2q7who/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}