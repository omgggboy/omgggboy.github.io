<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据链路层</title>
    <url>/2020/ckep1k1b800017f9k9iwh2139/</url>
    <content><![CDATA[<h2 id="使用点对点信道的数据链路层"><a href="#使用点对点信道的数据链路层" class="headerlink" title="使用点对点信道的数据链路层"></a>使用点对点信道的数据链路层</h2><h3 id="点对点信道的数据链路层在进行通信时的主要步骤如下"><a href="#点对点信道的数据链路层在进行通信时的主要步骤如下" class="headerlink" title="点对点信道的数据链路层在进行通信时的主要步骤如下"></a>点对点信道的数据链路层在进行通信时的主要步骤如下</h3><ul>
<li>1.结点A的数据链路层把网络层交下来的IP数据报添加首部和尾部封装成帧</li>
<li>2.结点A把封装好的帧发生发生给结点B的数据链路层</li>
<li>3.若结点B的数据链路层收到的帧无差错，则从收到的帧中提取 出IP数据报交给上面的网络层；否则丢弃这个帧</li>
</ul>
<h3 id="三个基本问题"><a href="#三个基本问题" class="headerlink" title="三个基本问题"></a>三个基本问题</h3><ul>
<li><p>封装成帧</p>
<ul>
<li>在一段数据的前后分布添加首部和尾部，这样就构成了一个帧</li>
<li>MTU(Maximum Transfer Unit)最大传送单元是指帧的数据部分长度上限,默认值1500字节</li>
</ul>
</li>
<li><p>透明传输</p>
<ul>
<li>“透明”表示某一个实际存在的事物看起来却好像不存在。这些数据就“看不见”数据链路层有什么防碍数据传输的东西。</li>
<li>为解决透明传输问题，发送端的数据链路层在出现控制字符“SOH”和“EOT”之前加入转义字符“ESC”，在接收端的数据链路层把数据运往网络层之前删除这些之前插入的转义字符。这种方法叫字节填充或字符填充。</li>
</ul>
</li>
<li><p>差错检测</p>
<ul>
<li><p>误码率</p>
<ul>
<li>在一段时间内，传输错误的比特占所传输比特总数的比率</li>
</ul>
</li>
<li><p>循环冗余检测CRC(Cyclic Redundancy Check)</p>
<ul>
<li>在每组数据后面增加n位冗余码供差错检测</li>
</ul>
</li>
<li><p>帧检验序列FCS(Frame Check Sequence)</p>
<ul>
<li>CRC是一种检错方法，而FSC是添加在数据后面的冗余码，在检错方法上可以选用CRC，但也可以不选用CRC</li>
</ul>
</li>
<li><p>数据链路层若仅仅使用CRC差错检测技术，则只能做到对帧但无差错接收</p>
</li>
<li><p>传输差错</p>
<ul>
<li><p>比特差错</p>
<ul>
<li>比特在传输过程中可能会产生差错，1变0，0变1</li>
</ul>
</li>
<li><p>没有比特差错</p>
<ul>
<li>帧丢失</li>
<li>帧重复</li>
<li>帧失序</li>
</ul>
</li>
</ul>
</li>
<li><p>对于通信质量较差但无线传输链路，数据链路层协议使用确认和重传机制，数据链路层向上提供可靠传输的服务</p>
</li>
</ul>
</li>
</ul>
<h2 id="点对点协议PPP-Point-to-Point-Protocol"><a href="#点对点协议PPP-Point-to-Point-Protocol" class="headerlink" title="点对点协议PPP(Point -to-Point Protocol)"></a>点对点协议PPP(Point -to-Point Protocol)</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li><p>应该满足的需求</p>
<ul>
<li>简单</li>
<li>封装成帧</li>
<li>透明性</li>
<li>多种网络层协议</li>
<li>多种类型链路</li>
<li>差错检测</li>
<li>检测连接状态</li>
<li>最大传送单元</li>
<li>网络层地址协商</li>
<li>数据压缩协商</li>
</ul>
</li>
<li><p>组成</p>
<ul>
<li>一个将IP数据报封装到串行链路的方法。PPP既支持异步链路（无奇偶检验的8比特数据），也支持面向比特的同步链路。IP数据报在PPP帧中就是信息部分。这个信息部分长度受最大传送单元MTU限制</li>
<li>一个用来建立、配置和测试数据链路连接的链路控制协议LCP(Link Control Protocol)。通信双方可以协商一些选项。在RFC 1661中定义了11种类型的LCP分组</li>
<li>一套网络控制协议NCP(Network Control Protocol),其中的每个协议支持不同的网络层协议，如IP、OSI的网络层、DECnet、以及AppleTalk等。</li>
</ul>
</li>
</ul>
<h3 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h3><ul>
<li><p>各字段意义</p>
<ul>
<li>首部的第一个字段和尾部的第二个字段F(Flag),规定为0x7E</li>
<li>首部中的字段A规定为0xFF，控制字段C规定为0x03。最初考虑以后再对这两个字段的值进行定义，但自今也没有给出。</li>
<li>PPP首部的第四个字段是2字节的协议字段。当协议字段为0x0021时，PPP帧的信息字段就是IP数据报。若为0xC021，则信息字段是PPP链路控制协议LCP的数据，而0x8021表示网络层的控制数据。</li>
<li>信息字段的长度是可变的，不超过1500字节</li>
<li>尾部中的第一个字段(2字节)是使用CRC的帧检验序列FCS</li>
</ul>
</li>
<li><p>字节填充</p>
<ul>
<li><p>当PPP使用异步传输时，他把转义符定义为0x7D，并使用字节填充</p>
<ul>
<li>把信息字段中出现的每一个0x7E字节转变为2字节序列(0x7D,0x5E)</li>
<li>若信息字段中出现一个0x7D的字节(即出现了和转义字符一样的比特组合），则把0x7D转变为2字节序列(0x7D,0x5D)</li>
<li>若信息字段中出现ASCII码的控制符（即树枝小于0x20的字符），则在字符前面加上一个0x7D字节，同时把该字符的编码加以改变。例如，出现0x03就把它转变为2字节序列(0x7D,0x23)</li>
</ul>
</li>
</ul>
</li>
<li><p>零比特填充</p>
<ul>
<li><p>PPP协议用在SONET/SDH链路时，使用同步传输（一连串的比特连续传送）而不是异步传输（逐个字符地传送）</p>
<ul>
<li>在发送端，先扫描整个信息字段（通常用硬件实现，但也是可用软件实现，只是会慢些）。只要发现有5个连续1，则立即填入一个0.因此经过这个零比特填充后的数据，就可以保证在信息字段不会出现6个连续1。接收端在收到一个帧时，先找到标志字段F以确定一个帧的边界，接着再用硬件对其中的比特流进行扫描。每当发现5个连续1时，就把这5个连续1后的0删除，以还原成原来的信息比特流</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="工作状态"><a href="#工作状态" class="headerlink" title="工作状态"></a>工作状态</h3><ul>
<li>当用户拨号接入ISP后，就建立一条从用户个人电脑到ISP的物理连接。这时，用户个人电脑向ISP发送一系列的链路控制协议LCP分组（封装成多个PPP帧），以便建立LCP连接。这些分组以及其响应选择了将要使用的一些PPP参数。接着还要进行网络层配置，网络控制协议NCP给新接入的用户个人电脑分配一些临时的IP地址。这样，用户个人电脑就称为互联网上的一个有IP地址的主机了</li>
</ul>
<h2 id="使用广播信道的数据链路层"><a href="#使用广播信道的数据链路层" class="headerlink" title="使用广播信道的数据链路层"></a>使用广播信道的数据链路层</h2><h3 id="局域网的数据链路层"><a href="#局域网的数据链路层" class="headerlink" title="局域网的数据链路层"></a>局域网的数据链路层</h3><ul>
<li><p>局域网的优点</p>
<ul>
<li>具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源</li>
<li>便于系统的扩展和逐渐演变，各设备的位置可灵活调节和改变</li>
<li>提高了系统的可靠性、可用性和生存性</li>
</ul>
</li>
<li><p>局域网按网络拓扑分类</p>
<ul>
<li>星形网</li>
<li>环形网</li>
<li>总线网</li>
</ul>
</li>
<li><p>共享信道技术上的两种方法</p>
<ul>
<li><p>静态划分信道</p>
<ul>
<li>频分复用、时分复用、波分复用和码分复用等，用户只要分配到了信道就不会和其他用户发送冲突。但这种方法代价较高，不适合局域网使用</li>
</ul>
</li>
<li><p>动态媒体接入控制</p>
<ul>
<li><p>随机接入</p>
<ul>
<li>随机接入的特点是所有的用户可随机地发送信息。但如果恰巧有两个或更多但用户在同一时刻发送信息，那么在共享媒体上就要产生碰撞（即发送了冲突），使得这些用户但发送都失败。因此，必须有解决碰撞的网络协议。</li>
</ul>
</li>
<li><p>受控接入</p>
<ul>
<li>受控接入的特点是用户不能随机地发送信息而必须服从一定的控制。这类的典型代表有分散控制的令牌环局域网和集中控制的多点线路探询（polling），或称为轮询。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>IEEE802委员会曾把局域网的数据链路层拆成两个子层，即逻辑链路控制（LLC）子层（与传输媒体无关）和媒体接入控制子层（MAC）子层（与传输媒体有关）。但现在LLC子层已成历史。MAC（Medium Access Control）LLC（Logical Link Control）</p>
</li>
<li>计算机与外界局域网的通信要通过通信适配器（或网络适配器），它又称为网络接口卡或网卡。计算机的硬件地址就在适配器的ROM中</li>
</ul>
<h3 id="CSMA-CD协议"><a href="#CSMA-CD协议" class="headerlink" title="CSMA/CD协议"></a>CSMA/CD协议</h3><ul>
<li><p>协议要点</p>
<ul>
<li><p>多点接入</p>
<ul>
<li>说明这是总线型网络，许多计算机以多点接入的方式连接在一个总线上</li>
</ul>
</li>
<li><p>载波监听</p>
<ul>
<li>载波监听就是检测信道。不管发送前，还是发送中，每个站都必须不停地检测信道</li>
</ul>
</li>
<li><p>碰撞检测</p>
<ul>
<li>就是“便发送边监听”，即适配器边发送数据边检测信道上的信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据</li>
</ul>
</li>
</ul>
</li>
<li><p>总结</p>
<ul>
<li><p>准备发送</p>
<ul>
<li>适配器从网络层获得一个分组，加上以太网的首部和尾部，以组成以太网帧，放入适配器的缓存中。但是发送之前，必须先检测信道</li>
</ul>
</li>
<li><p>检测信道</p>
<ul>
<li>若检测到信道忙，则应不停地检测，一直等待信道转为空闲。若检测到信道空闲，并在96比特时间内信道保持空闲（保证了帧间最小间隔），就发送这个帧。</li>
</ul>
</li>
<li><p>在发送过程中仍不停地检测信道，即网络适配器要边发送边监听</p>
<ul>
<li>发送成功：争用期内一直为检测到碰撞。这个帧肯定能够发送成功。发送完毕后，其他什么也不做。然后回到准备发送的状态。</li>
<li>发送失败：在争用期内检测到碰撞。这时立即停止发送数据，并按规定发送人为干扰信号。适配器接着执行指数退避算法，等待r倍512比特时间后，返回到检测信道。但若重传达16次仍不成功，则停止重传而向上报错</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="集线器"><a href="#集线器" class="headerlink" title="集线器"></a>集线器</h3><ul>
<li>使用集线器物理上是星型网实际，在逻辑上仍然是一个总线网，各站使用的还是CSMA/CD协议</li>
<li>集线器有很多接口，很像一个多接口的转发器</li>
<li>集线器工作在物理层，工作只是简单地转发，不进行碰撞检测</li>
<li>集线器采用了专门的芯片，进行自适应串音回波抵消</li>
</ul>
<h3 id="以太网的MAC层（medium-access-control）"><a href="#以太网的MAC层（medium-access-control）" class="headerlink" title="以太网的MAC层（medium access control）"></a>以太网的MAC层（medium access control）</h3><ul>
<li><p>MAC层的硬件地址</p>
<ul>
<li>硬件地址又称为物理地址或MAC地址</li>
<li>MAC地址固化在适配器的ROM中</li>
</ul>
</li>
<li><p>MAC帧的格式</p>
<ul>
<li>第一个字段：6字节长的目的地址</li>
<li>第二个字段：6字节长的源地址</li>
<li><p>第三个字段：2字节长的类型字段</p>
<ul>
<li>IP数据报：0x0800</li>
<li>Novell IPX：0x8137</li>
</ul>
</li>
<li><p>第四个字段：长度在46到1500字节之间的数据字段</p>
</li>
<li>第五个字段：4字节的帧检验序列FCS（使用CRC检验）</li>
</ul>
</li>
</ul>
<h3 id="扩展的以太网"><a href="#扩展的以太网" class="headerlink" title="扩展的以太网"></a>扩展的以太网</h3><ul>
<li>使用集线器在物理层扩展以太网</li>
<li>交换式集线器常称为以太网交换机或第二层交换机（工作在数据链路层）。他就是一个多接口的网桥，而每个接口都直接与某台主机或另一个集线器相连，且工作在全双工方式。以太网交换机能同时连通许多对的接口，使每一对相互通信的主机都能像独占通信媒体那样，无碰撞地传输数据</li>
</ul>
<p><em>XMind: ZEN - Trial Version</em></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title>进程间通信</title>
    <url>/2020/ckep1k1bb00037f9k3eyqewlf/</url>
    <content><![CDATA[<h3 id="进程协作的目的"><a href="#进程协作的目的" class="headerlink" title="进程协作的目的"></a>进程协作的目的</h3><ul>
<li><strong>信息共享</strong>： 由于多用户可能对同样的信息感兴趣（例如共享文件），所以应提供环境以允许并发访问这些信息。</li>
<li><strong>计算加速</strong>： 如果希望一个特定快速运行，那么应将系统功能划分成子任务，而每个子任务可以与其他子任务一起并行执行。注意，如果要实现这样的加速，那么计算机需要有多个处理核。</li>
<li><strong>模块化</strong>： 可以需要按模块化方式构造系统，如第2章所讨论的，可将系统功能划分成独立的进程和线程。</li>
<li><strong>方便</strong>： 即使单个用户也可以同时执行许多任务。例如，用户可以并行的编辑、收听音乐、编译。</li>
</ul>
<h5 id="协作进程需要进程间通信（IPC"><a href="#协作进程需要进程间通信（IPC" class="headerlink" title="协作进程需要进程间通信（IPC)"></a>协作进程需要进程间通信（IPC)</h5><h3 id="进程间通信的两种基本模型：共享内存和消息传递"><a href="#进程间通信的两种基本模型：共享内存和消息传递" class="headerlink" title="进程间通信的两种基本模型：共享内存和消息传递"></a>进程间通信的两种基本模型：共享内存和消息传递</h3><h4 id="共享内存系统"><a href="#共享内存系统" class="headerlink" title="共享内存系统"></a>共享内存系统</h4><p>采用共享内存的进程间通信，需要通信进程建立共享内存区域。通常，一片共享内存区域驻留在创建共享内存段的进程空间内。其他希望使用这个共享内存段进行通信段进行通信的进程应将其附加到自己的地址空间。</p>
<p>生产者进程生成信息，以供消费者进程消费。为了允许生存者进程和消费者进程并发执行，应有一个可用的缓冲区，以被生存者填充和被消费者清空。这个缓冲区驻留在生产者进程和消费者进程的共享内存区域内。当消费者使用一项时，生产者可生产另一项。生产者和消费者必须同步，这样消费者不会试图消费一个尚未生产出来的项。</p>
<p>缓冲区域类型可分为两种。<br><strong>无界缓冲区</strong>没有限制缓冲区的大小。消费者可能不得不等待新的项，但生产者总是可以产生新项。<br><strong>有界缓冲区</strong>假设固定大小的缓冲区。对于这种情况，如果缓冲区空，那么消费者必须等待；并且如果缓冲区满，那么生产者必须等待。</p>
<h6 id="采用共享内存的生产者进程如下："><a href="#采用共享内存的生产者进程如下：" class="headerlink" title="采用共享内存的生产者进程如下："></a>采用共享内存的生产者进程如下：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(true) &#123;</span><br><span class="line">    &#x2F;* produce an item in next_produced *&#x2F;</span><br><span class="line">    </span><br><span class="line">    while(((in + 1) % BUFFER_SIZE) &#x3D;&#x3D; out)</span><br><span class="line">        ; &#x2F;* do nothing *&#x2F;</span><br><span class="line">    </span><br><span class="line">    buffer[in] &#x3D; next_produced;</span><br><span class="line">    in &#x3D; (in + 1) % BUFFER_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="采用共享内存的消费者进程如下："><a href="#采用共享内存的消费者进程如下：" class="headerlink" title="采用共享内存的消费者进程如下："></a>采用共享内存的消费者进程如下：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(true) &#123;</span><br><span class="line">    while(in &#x3D;&#x3D; out)</span><br><span class="line">        ;&#x2F;* do nothing *&#x2F;</span><br><span class="line">    next_consumed &#x3D; buffer[out];</span><br><span class="line">    out &#x3D; (out + 1) % BUFFER_SIZE;</span><br><span class="line">    </span><br><span class="line">    &#x2F;* consume the item in next_consumed *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="消息传递系统"><a href="#消息传递系统" class="headerlink" title="消息传递系统"></a>消息传递系统</h4><p>对于分布式环境（通信进程可能位于通过网络连接的不同计算机），消息传递特别有用。<br>消息传递工具提供至少两种操作：</p>
<ul>
<li>send(message)     </li>
<li>recevie(message)</li>
</ul>
<p>进程发送消息可以是定长的或变长的。如果只能发生定长消息，那么系统级实现就简单。不过，这一限制使得编程任务更加困难。相反，变长消息要求更复杂的系统级实现，但是编程任务就变得更简单。在整个操作系统设计中，这种折中很常见。</p>
<p>如果进程P和Q需要通信，那么它们必须相互发送消息和接受消息：它们之间要有<strong>通信链路</strong>。该链路的实现有多种方法。这里不关心链路的物理实现，而只关心链路的逻辑实现。这里有几个方法，用于实现链路和操作send()/receive():</p>
<ul>
<li>直接或间接的通信</li>
<li>同步或异步的通信</li>
<li>自动或显式的缓冲</li>
</ul>
<h4 id="1-命名"><a href="#1-命名" class="headerlink" title="1. 命名"></a>1. 命名</h4><p>需要通信的进程应有一个方法，以便相互引用。它们可以直接或间接的通信。<br>对于<strong>直接通信</strong>，需要通信的每个进程必须指明指定通信的接收者或发送者。采用这种方案，原语send()和receive()定义如下：</p>
<ul>
<li>send(P, message): 向进程P发送message。</li>
<li>receive(Q, message)： 从进程Q接收message。</li>
</ul>
<p>这种方案的通信链路具有以下属性：</p>
<ul>
<li>在需要通信的每对进程之间，自动建立链路。进程仅需知道对方身份就可交流。</li>
<li>每个链路只与两个进程相关。</li>
<li>每个进程只有一个链路。</li>
</ul>
<p>这种方案展示了寻址的对称性，即发送和接收进程必须指定对方，以便通信。这种方案的一个变形采用寻址的非对称性，即只要发送者指定接收者，而接受者不需要指定发送者。采用这种方案，原语send()和receive()的定义如下：</p>
<ul>
<li>send(P, message): 向进程P发送message。</li>
<li>receive(id, message): 从任何进程，接收message，这里变量id被设置成与其通信进程的名称。</li>
</ul>
<p>这两个方案（对称和非对称的寻址）的缺点是：生成进程定义的有限模块化。更改进程的标志符可能需要分析其他进程定义。所有旧的标志符的引用都应找到，以便修改成为新标识符。通常，任何时候的硬编码技术（其中标志符需要明确指定），与下面所诉的采用间接技术相比要差。</p>
<p>在<strong>间接通信</strong>中，通过邮箱和端口来接收消息。邮箱可以抽象成一个对象，进程可以向其中存放消息，也可以从中删除消息，每个邮箱都有一个唯一的标识符。一个进程可以通过不同邮箱与另一个进程通信，但是两个进程只有拥有一个共享邮箱时才能通信。原语send()和receive()定义如下：</p>
<ul>
<li>send(A, message): 向邮箱A发送message。</li>
<li>receive(A, message): 从邮箱A接收messgae。</li>
</ul>
<p>对于这种方案，链路通信具有如下特点：</p>
<ul>
<li>只有两个进程共享一个邮箱时，才能建立通信链路。</li>
<li>一个链路可以与两个或更多进程相关联。</li>
<li>两个通信进程之间可有多个不同链路，每个链路对应于一个邮箱。</li>
</ul>
<h4 id="2-同步"><a href="#2-同步" class="headerlink" title="2. 同步"></a>2. 同步</h4><p>进程间通信可以通过调用原语send()和receive()来进行。实现这些原语有不同的设计方案。消息传递可以是阻塞或非阻塞，也称为同步或异步。</p>
<ul>
<li><strong>阻塞发送</strong>： 发送进程阻塞，直到消息由接收进程或邮箱所接收。</li>
<li><strong>非阻塞发送</strong>： 发送进程发送消息，并且恢复操作。</li>
<li><strong>阻塞接收</strong>： 接收进程阻塞，直到消息可用。</li>
<li><strong>非阻塞接收</strong>： 接收进程收到一个有效消息或者空消息。</li>
</ul>
<p>不同组合的send()和receive()都有可能。当send()和receive()都是阻塞的，则在发送者和接收者之间就有一个<strong>交互</strong>。当采用阻塞的send()和receive()时，生产者-消费者问题的解决就简单了。生产者仅需调用阻塞send()并且等待，直到消息被送到接收者或者邮箱。同样，当消费者调用reiceve()时，它会阻塞直到有一个消息可用。</p>
<h6 id="采用消息传递的生产者进程如下："><a href="#采用消息传递的生产者进程如下：" class="headerlink" title="采用消息传递的生产者进程如下："></a>采用消息传递的生产者进程如下：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">message next_produced</span><br><span class="line">while(true) &#123;</span><br><span class="line">    &#x2F;* produce an item in next_produced *&#x2F;</span><br><span class="line">    </span><br><span class="line">    send(next_produced);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="采用消息传递的消费者进程如下："><a href="#采用消息传递的消费者进程如下：" class="headerlink" title="采用消息传递的消费者进程如下："></a>采用消息传递的消费者进程如下：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">message next_comsumed</span><br><span class="line">while(true) &#123;</span><br><span class="line">    receive(next_consumed);</span><br><span class="line">    </span><br><span class="line">    &#x2F;* consume the item in next_consumed *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-缓存"><a href="#3-缓存" class="headerlink" title="3. 缓存"></a>3. 缓存</h4><p>不管通信时直接的还是间接的，通信进程交换的消息总是驻留在临时队列中。简单地讲，队列实现有三种方法：</p>
<ul>
<li><strong>零容量</strong>：队列的最大长度为0；因此，链路中不能有任何消息处于等待。对于这种情况，发送者应阻塞，直到接收者接收消息。</li>
<li><strong>有限容量</strong>： 队列长度为有限的n；因此，最多只能有n个消息驻留其中。如果在发送消失时队列未满，那么该消息可以放在队列中（或者复制消息或者保存消息的指针），且发生者可以继续执行而不必等待。然而，链路容量是有限。如果链路已满，那么发送者应阻塞，直到队列空间有有用的为止。</li>
<li><strong>无限容量</strong>： 队列长度可以无限，因此，不管多少消息都可以在其中等待。发送者从不阻塞。</li>
</ul>
<p>零容量情况称为无缓冲的消息系统，其他情况称为自动缓冲的消息系统。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵</title>
    <url>/2020/ckep1k1bf00077f9k3p862hmg/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>矩阵(matrix)是由$n \ times m$个标量组成的长方形数组。矩阵便于表示线性变换（transformation)，如平移(translation)、旋转(rotation)和缩放(scaling)。在某些条件下，$4 \times 4$矩阵可以表示任意三维变换，包括平移、旋转和缩放。这种矩阵称为变换矩阵。利用矩阵乘法可以将表示为矩阵的变换，施于点或矢量。仿射矩阵（affine matrix）是种$4 \times 4$的变换矩阵，他能维持直线在变换前后的平行性以及相对的距离比，但是不一定维持直线在变换前后的相对长度和角度。由平移、旋转、缩放及/或切变(shear)所组合而成的变换都是仿射矩阵。</p>
<h3 id="1-矩阵乘法"><a href="#1-矩阵乘法" class="headerlink" title="1. 矩阵乘法"></a>1. 矩阵乘法</h3><p>两矩阵$A$和$B$的积写作$P = AB$。若$A$和$B$为变换矩阵，其积$P$也是变换矩阵，而且以$P$进行变换时，等同于进行$A$和$B$两者的变换。此特性对游戏编程特别有用，因为我们可以把一连串变换预先计算为单一矩阵，在用该矩阵高效地变换大批矢量。</p>
<script type="math/tex; mode=display">AB=\begin{bmatrix} A_{11}&A_{12}&A_{13}\\A_{21}&A_{22}&A_{23}\\A_{31}&A_{32}&A_{33}\end{bmatrix}\begin{bmatrix} B_{11}&B_{12}&B_{13}\\B_{21}&B_{22}&B_{23}\\B_{31}&B_{32}&B_{33}\end{bmatrix} = \begin{bmatrix} A_{row1}B_{col1}&A_{row1}B_{col2}&A_{row1}B_{col3}\\A_{row2}B_{col1}&A_{row2}B_{col2}&A_{row2}B_{col3}\\A_{row3}B_{col1}&A_{row3}B_{col2}&A_{row3}B_{col3}\end{bmatrix}</script><p>tips：完美世界笔试题，编写矩阵乘法函数，并进行优化。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最朴素的矩阵乘法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE_M 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE_N 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE_S 4</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">int</span> matrix_a[SIZE_M] [SIZE_N]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;<span class="comment">//a矩阵2X3</span></span><br><span class="line">	<span class="keyword">int</span> matrix_b[SIZE_N] [SIZE_S]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;&#125;;<span class="comment">//b矩阵3X4</span></span><br><span class="line">	<span class="keyword">int</span> matrix_result[SIZE_M][SIZE_S];<span class="comment">//结果矩阵2X4</span></span><br><span class="line">	</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;SIZE_M;m++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;SIZE_S;s++)&#123;</span><br><span class="line">			matrix_result[m][s]=<span class="number">0</span>;<span class="comment">//变量使用前记得初始化,否则结果具有不确定性</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;SIZE_N;n++)&#123;</span><br><span class="line">				matrix_result[m][s]+=matrix_a[m][n]*matrix_b[n][s];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;SIZE_M;m++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;SIZE_S;s++)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;matrix_result[m][s]&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>// Stressen算法（算法导论分治策略提及）<br>c++分析和具体实现参照一下网站<br><a href="https://blog.csdn.net/qq_31567335/article/details/52695144">https://blog.csdn.net/qq_31567335/article/details/52695144</a><br><a href="https://www.cnblogs.com/hdk1993/p/4552534.html">https://www.cnblogs.com/hdk1993/p/4552534.html</a></p>
<h3 id="2-矩阵表示点和矢量"><a href="#2-矩阵表示点和矢量" class="headerlink" title="2. 矩阵表示点和矢量"></a>2. 矩阵表示点和矢量</h3><p>点和矢量都可以被表示为行矩阵（row matrix)$(1 \times n)$或列矩阵(column matrix)$(n \times 1)$，其中n表示空维度。本来可以任意选择行矢量和列矢量，但此会影响书写次序。最容易的记忆方法是，最接近矢量的矩阵会被最先进行变换。</p>
<h3 id="3-单位矩阵"><a href="#3-单位矩阵" class="headerlink" title="3. 单位矩阵"></a>3. 单位矩阵</h3><p>单位矩阵(identity matrix)是指，它乘以任何其他矩阵，都会得到和原来一样的矩阵。单位矩阵写作$I$。单位矩阵是正方形矩阵，对角线上的元素皆为1，其他元素为0：<br><img src="https://wiki.mbalib.com/w/images/math/a/a/b/aab94f3654099a22bbf9aedfe99324e2.png" alt="单位矩阵"></p>
<h3 id="4-逆矩阵"><a href="#4-逆矩阵" class="headerlink" title="4. 逆矩阵"></a>4. 逆矩阵</h3><p>矩阵<strong><em>A</em></strong>的逆矩阵(inverse matrix)(写作$A^{-1}$)能还原矩阵$A$的变换。一个矩阵乘以它的逆矩阵，结果必然是单位矩阵，因此$A(A^{-1}) = (A^{-1})A = I$。并非所有的矩阵都有逆矩阵。然而，所以仿射矩阵(纯平移，选择，缩放及切变的组合)都有逆矩阵。若矩阵的逆矩阵存在，可以高斯消去法(Gaussian eliminaton)或LU分解(LU decomposition)求之。</p>
<h3 id="5-转置矩阵"><a href="#5-转置矩阵" class="headerlink" title="5. 转置矩阵"></a>5. 转置矩阵</h3><p>矩阵$M$的转置(transpose)写作$M^{T}$。转置矩阵就是把原来的矩阵以主对角线(diagonal)为对称轴做反射。<br>原矩阵：<br><img src="https://pic2.zhimg.com/80/v2-be3ee7cd7c1f4bfd544ebd72083ac75c_720w.jpg?source=1940ef5c" alt="原矩阵"><br>转置后：<br><img src="https://pic2.zhimg.com/80/v2-1818ee965177eca20540577df77b910b_720w.jpg?source=1940ef5c" alt="转置矩阵"></p>
<p>基于以下两个原因，转置矩阵很实用。首先，标准正交矩阵(纯旋转)的逆矩阵和转置矩阵是一样的—此特性非常好，因为计算转置矩阵比计算一般逆矩阵快很多；其次，当把数据从一个数学程序库送到另一个程序库时，转置矩阵也十分重要，因为有些库使用行矢量，有些则使用列矢量</p>
<h3 id="6-齐次坐标-homogeneous-coordinates）"><a href="#6-齐次坐标-homogeneous-coordinates）" class="headerlink" title="6. 齐次坐标(homogeneous coordinates）"></a>6. 齐次坐标(homogeneous coordinates）</h3><p>由于3维种旋转是由3X3矩阵表示，但是平移无法由3X3矩阵表示，那么我们则无法将仿射变换通过矩阵乘法叠加，但是我们可以将平移使用4X4矩阵来表示。齐次坐标的作用，把各种变换都统一了起来，即 把缩放，旋转，平移等变换都统一起来，都表示成一连串的矩阵相乘的形式。保证了形式上的线性一致性。</p>
<p>除此之外，在数学上，点（位置矢量）和方向矢量的处理方法有细微差异，当用矩阵变换一个点时，平移，旋转，缩放，都会施加于该点上。但是，当用矩阵变换一个方向矢量时，就要忽略矩阵的平移效果。因为方向矢量本身并无平移，加上平移会改变其模，这并非我们想要的。在齐次坐标中，可以将点的w分量设为1，而把方向矢量的w分量设为0。以下的例子显示，矢量v中的w = 0, 因此乘以矩阵的t矢量后，可在结果中消去平移的作用:<br><img src="http://latex.codecogs.com/gif.latex?%5Cbegin%7Bbmatrix%7Dv%260%5Cend%7Bbmatrix%7D%5Cbegin%7Bbmatrix%7DU%260%20%5C%5C%20t%261%5Cend%7Bbmatrix%7D%20%3D%20%5Cbegin%7Bbmatrix%7D%28vU%20&plus;%200t%29%260%5Cend%7Bbmatrix%7D%20%3D%20%5Cbegin%7Bbmatrix%7DvU%260%5Cend%7Bbmatrix%7D" alt=""></p>
<p>严格来说，（四维的）齐次坐标转换成（三维的）非齐次坐标的方法是，把x, y ,z分量除以w分量：<br><img src="http://latex.codecogs.com/gif.latex?%5Cbegin%7Bbmatrix%7Dx%26y%26z%26w%5Cend%7Bbmatrix%7D%20%5Cequiv%20%5Cbegin%7Bbmatrix%7D%5Cfrac%7Bx%7D%7Bw%7D%26%5Cfrac%7By%7D%7Bw%7D%26%5Cfrac%7Bz%7D%7Bw%7D%5Cend%7Bbmatrix%7D" alt=""><br>此公式表明，可设点的w分量为1，方向矢量为0。矢量除以w=1,并不影响点的坐标，但是矢量除以w=0则会产生无穷大(infinity)。四维中位于无穷远的一点，可以旋转但不可以平移，因为无论怎么平移，该点还是位于无穷远。所以事实上，三维空间的纯方向矢量在四维齐次空间中则是无穷远的点。</p>
<h3 id="7-基础变换坐标"><a href="#7-基础变换坐标" class="headerlink" title="7. 基础变换坐标"></a>7. 基础变换坐标</h3><p>任何仿射变换矩阵都能由一连串表示纯平移，纯旋转，纯缩放及/或纯切变的4X4矩阵串接而成。4X4变换矩阵可切割成4个组成部分：<br><img src="http://latex.codecogs.com/gif.latex?M_%7Baffine%7D%3D%5Cbegin%7Bbmatrix%7DU_%7B3%5Ctimes3%20%7D%20%26%200_%7B3%5Ctimes%201%7D%20%5C%5C%20t_%7B1%5Ctimes%203%7D%26%201%5Cend%7Bbmatrix%7D" alt=""></p>
<ul>
<li>左上角的3 X 3矩阵U，代表旋转及/或缩放。</li>
<li>1 X 3平移矢量t</li>
<li>3 X 1零矢量$0 = [ 0 0 0]^{T}$。</li>
<li>矩阵右下角的标量1。</li>
<li>当一点乘如此切割的矩阵时，结果会是：<br><img src="http://latex.codecogs.com/gif.latex?%5Cbegin%7Bbmatrix%7Dr_%7B1%20%5Ctimes%203%7D%20%5E%7B%7B%7D%27%7D%261%20%5Cend%7Bbmatrix%7D%20%3D%20%5Cbegin%7Bbmatrix%7Dr_%7B1%20%5Ctimes%203%7D%261%20%5Cend%7Bbmatrix%7D%20%5Cbegin%7Bbmatrix%7DU_%7B3%20%5Ctimes%203%7D%260_%7B3%20%5Ctimes%201%7D%5C%5Ct_%7B1%20%5Ctimes%203%7D%261%20%5Cend%7Bbmatrix%7D%20%3D%20%5Cbegin%7Bbmatrix%7D%28rU%20&plus;%20t%29%26%201%20%5Cend%7B%7D" alt=""></li>
</ul>
<h4 id="7-1-平移"><a href="#7-1-平移" class="headerlink" title="7.1 平移"></a>7.1 平移</h4><p><img src="http://latex.codecogs.com/gif.latex?r%20&plus;%20t%20%3D%5Cbegin%7Bbmatrix%7Dr_%7Bx%7D%26r_%7By%7D%26r_%7Bz%7D%261%20%5Cend%7Bbmatrix%7D%20%5Cbegin%7Bbmatrix%7D1%260%260%260%5C%5C%200%261%260%260%5C%5C0%260%261%260%5C%5Ct_%7Bx%7D%26t_%7By%7D%26t_%7Bz%7D%261%5Cend%7Bbmatrix%7D%20%3D%20%5Cbegin%7Bbmatrix%7Dr_%7Bx%7D%20&plus;%20t_%7Bx%7D%26r_%7By%7D%20&plus;%20t_%7By%7D%26r_%7Bz%7D%20&plus;%20t_%7Bz%7D%26%201%20%5Cend%7B%7D" alt=""><br>或可写成切割后的缩写：<br><img src="http://latex.codecogs.com/gif.latex?%5Cbegin%7Bbmatrix%7Dr%261%20%5Cend%7B%7D%20%5Cbegin%7Bbmatrix%7DI%260%20%5C%5C%20t%20%261%20%5Cend%7B%7D%20%3D%20%5Cbegin%7Bbmatrix%7D%28r&plus;t%29%261%20%5Cend%7B%7D" alt=""></p>
<p>为求纯平移变换矩阵的逆矩阵，只需要t求反(negate)。</p>
<h4 id="7-2旋转"><a href="#7-2旋转" class="headerlink" title="7.2旋转"></a>7.2旋转</h4><p>所有4 X 4纯旋转变换矩阵都是如下形式：<br><img src="http://latex.codecogs.com/gif.latex?%5Cbegin%7Bbmatrix%7Dr%261%20%5Cend%7B%7D%20%5Cbegin%7Bbmatrix%7DR%260%20%5C%5C%200%20%261%20%5Cend%7B%7D%20%3D%20%5Cbegin%7Bbmatrix%7DrR%261%20%5Cend%7B%7D" alt=""><br>矢量t为0，而左上角的3 X 3矩阵R则包含旋转角度（弧度单位）的余弦和正弦。</p>
<h4 id="7-3-缩放"><a href="#7-3-缩放" class="headerlink" title="7.3 缩放"></a>7.3 缩放</h4><p>以下的矩阵缩放点r,向x轴的缩放因子为$s_x$，向y轴的为$s_y$，向z轴为$s_z$：<br><img src="http://latex.codecogs.com/gif.latex?rS%20%3D%20%5Cbegin%7Bbmatrix%7Dr_x%26r_y%26r_z%261%20%5Cend%7B%7D%20%5Cbegin%7Bbmatrix%7Ds_x%20%260%260%260%5C%5C0%26s_y%260%260%20%5C%5C%200%260%26s_z%260%5C%5C0%260%260%261%20%5Cend%7B%7D%20%3D%20%5Cbegin%7Bbmatrix%7Ds_xr_x%26s_yr_y%26s_zr_z%261%20%5Cend%7B%7D" alt=""><br>或可写成切割后的缩写：</p>
<script type="math/tex; mode=display">\begin{bmatrix} r&1\end{bmatrix} \begin{bmatrix} S_{3 \times 3}&0\\0&1\end{bmatrix} = \begin{bmatrix} rS_{3 \times 3}&1\end{bmatrix}</script><h3 id="8-4-X-3矩阵"><a href="#8-4-X-3矩阵" class="headerlink" title="8. 4 X 3矩阵"></a>8. 4 X 3矩阵</h3><p>4 X 4仿射矩阵的最右侧必然是一列[0 0 0 1]T的矢量。因此，游戏程序员可略去第4列，以节省内存。在游戏数学库里经常会遇到4X3仿射矩阵。在使用GPU做蒙皮(skinning)时，要向顶点着色器(vertex shader)传递大量的变换，所以为节省空间、时间，通常会使用4X3的矩阵。</p>
<h3 id="9-坐标空间"><a href="#9-坐标空间" class="headerlink" title="9. 坐标空间"></a>9. 坐标空间</h3><p>在物理学中，一组坐标轴代表参考系（frame of reference），所以有时候又会称一组坐标轴为坐标系(coordinate frame，简称为frame)。游戏业界会使用坐标空间(coordinate space)一词，或简称空间(space)，来表示一组坐标轴。以下讨论游戏和计算机图形学中几个较为常用的空间坐标。</p>
<h4 id="9-1-模型空间"><a href="#9-1-模型空间" class="headerlink" title="9.1 模型空间"></a>9.1 模型空间</h4><p>当使用Maya或3ds Max之类的工具去建立三角形网格时，三角形顶点的位置是相对于一个笛卡儿坐标系的，我们称此坐标系为模型空间(model space)，也可以称之为物体空间(object space)或局部空间(local space)。模型空间的原点可置于物体的中心位置，如物体的质心(center of mass)，对于人形及动物着色，可把模型空间的原点置于足部和地面之间。</p>
<h4 id="9-2-世界空间"><a href="#9-2-世界空间" class="headerlink" title="9.2 世界空间"></a>9.2 世界空间</h4><p>世界空间(world space)是一个固定的坐标空间。游戏世界中所以物体的位置、定向和缩放都会用此空间表示。此坐标空间把所有单个物体联系在一起，形成一个内聚的虚拟世界。</p>
<h4 id="9-3-观察空间"><a href="#9-3-观察空间" class="headerlink" title="9.3 观察空间"></a>9.3 观察空间</h4><p>观察空间(view space)又称为摄像机空间(camera space),是固定在摄像机的坐标系。观察空间原点置于摄像机的焦点（focal point)。而且，观察空间也可采用不同的轴定向方案。但是，y轴向上、z轴顺着摄像机面对方向，是最典型的，因为+z轴代表着屏幕的深度。其他引擎和API(如OpenGL)做用右手系定义观察空间，使摄像机朝向的方向为-z轴，z坐标代表负深度。</p>
<h3 id="10-基的更变"><a href="#10-基的更变" class="headerlink" title="10. 基的更变"></a>10. 基的更变</h3><p>在游戏和计算机图形学里，经常把物体的位置、定向和缩放从某个坐标系转换为另一个坐标系。我们称此为基的变更(change of basis)。</p>
<h4 id="10-1-坐标空间的层次结构"><a href="#10-1-坐标空间的层次结构" class="headerlink" title="10.1 坐标空间的层次结构"></a>10.1 坐标空间的层次结构</h4><p>坐标系是相对的。即若想在三维空间中定义一组轴，必须指明其位置、定向和缩放的数值是相对于另外一组轴的（否则那些数值是没意义的）。这意味着，坐标空间会形成一个层阶结构—每个坐标空间都是某个坐标空间之子，而那个坐标空间则是父的角色。世界空间并无父，因为他是坐标空间树的根，其他坐标空间则直接或间接地相对于世界空间。</p>
<h4 id="10-2-构建改变基的矩阵"><a href="#10-2-构建改变基的矩阵" class="headerlink" title="10.2 构建改变基的矩阵"></a>10.2 构建改变基的矩阵</h4><p>把点和方向从任何子坐标系C变换至其父坐标系P的矩阵，可写作$M_{C \rightarrow P}$ 。此下标表示矩阵把点和方向从子空间变换至父空间。以下等式可把任何子空间位置矢量$P_C$变换至父空间位置矢量$P_C$:</p>
<script type="math/tex; mode=display">P_P = P_CM_{C \rightarrow P}</script><p><img src="http://latex.codecogs.com/gif.latex?M_%7BC%5Crightarrow%20P%7D%20%3D%20%5Cbegin%7Bbmatrix%7D%20i_C%26%200%5C%5C%20j_C%20%26%200%20%5C%5C%20k_C%260%20%5C%5C%20t_C%26%201%20%5Cend%7B%7D%20%3D%20%5Cbegin%7Bbmatrix%7D%20i_%7BC_x%7D%26%20i_%7BC_y%7D%26i_%7BC_z%7D%260%5C%5Cj_%7BC_x%7D%26%20j_%7BC_y%7D%26j_%7BC_z%7D%260%5C%5Ck_%7BC_x%7D%26%20k_%7BC_y%7D%26k_%7BC_z%7D%260%5C%5Ct_%7BC_x%7D%26%20t_%7BC_y%7D%26t_%7BC_z%7D%261%5Cend%7B%7D" alt=""><br>以上等式中：</p>
<ul>
<li>$i_C$为子空间x轴的单位基矢量，此矢量以父空间坐标来表示。</li>
<li>$j_C$为子空间y轴的单位基矢量，此矢量以父空间坐标来表示。</li>
<li>$k_C$为子空间z轴的单位基矢量，此矢量以父空间坐标来表示。</li>
<li>$t_C$为子坐标系相对于父坐标系的平移。</li>
</ul>
<p><strong>缩放子轴</strong>  通过简单且恰当的缩放单位基矢量，便可以缩放子坐标系统。例如，若子空间放大两倍，则基矢量$i_C, j_C, k_C$就由单位长度变为长度为2。 </p>
<h4 id="10-3-从矩阵中获取单位基矢量"><a href="#10-3-从矩阵中获取单位基矢量" class="headerlink" title="10.3 从矩阵中获取单位基矢量"></a>10.3 从矩阵中获取单位基矢量</h4><p>由于基变更矩阵是由平移及三个笛卡儿基矢量组成的，此事实可带来一个强大工具：给定任何4X4仿射矩阵，都可以用反向思维，从恰当的矩阵行(若是由列矢量则为矩阵列)中获取子空间基矢量$i_C,j_C,k_C$。</p>
<h4 id="10-4-变换坐标系还是矢量"><a href="#10-4-变换坐标系还是矢量" class="headerlink" title="10.4 变换坐标系还是矢量"></a>10.4 变换坐标系还是矢量</h4><p>若基于坐标轴来思考，变换会是某一个方向；若基于点和坐标来思考，变换则是另一个方向！</p>
<h3 id="11-变换法矢量"><a href="#11-变换法矢量" class="headerlink" title="11. 变换法矢量"></a>11. 变换法矢量</h3><p>法矢量是一种特殊的矢量，因为它除了是单位矢量（通常情况是）外，法矢量还有附加要求—维持与对应的表面或平面垂直。变换法矢量必须特别留心，以确保维持其长度和垂直性。<br>一般情况下，为了保证即使变换里含非统一缩放或切变；变换后的法矢量仍然垂直于其对应表面，需要对方矢量做仿射矩阵的逆转置矩阵做变换$(M_{A \rightarrow B}^{-1})^T$。从另一个角度看，这里需要逆转置是因为表面矢量是赝矢量，不是普通矢量。</p>
]]></content>
      <categories>
        <category>计算机图形学</category>
      </categories>
      <tags>
        <tag>数学基础</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是死锁？在什么情况下产生？怎么解决？</title>
    <url>/2020/ckep1k1bg00097f9k1jvfaoqm/</url>
    <content><![CDATA[<p>在多道程序环境中，多个进程可以竞争有限数量的资源。当一个进程申请资源时，如果这时没有可用资源，那么这个进程进入等待状态。有时，如果所申请的资源被其他等待进程占有，那么等待进程有可能再也无法改变状态。这种情况称为死锁（deadlock）。</p>
<p>死锁的必要条件：如果在一个系统中以下四个条件同时成立，那么就能引起死锁：</p>
<ul>
<li><strong>互斥（ mutual exclusion）</strong>：至少一个资源必须处于非共享模式，即一次只有一个进程可使用。如果另一进程申请该资源，那么申请进程应等到该资源释放为止。</li>
<li><strong>占有并等待（ hold and wait ）</strong>：一个进程应占有至少一个资源，并等待另一个资源，该资源为其他进程所占有。</li>
<li><strong>非抢占（ no preemption ）</strong>：资源不能被抢占，即资源只能被进程完成任务后自愿释放。</li>
<li><strong>循环等待（ circular wait ）</strong>：有一组等待进程{P0,P1,···，Pn},P0等待的资源为P1占有，P1等待的资源为P2占有，·······，P（n-1）等待的资源为Pn占有，Pn等待的资源被P0占有。</li>
</ul>
<p>四个条件必须同时成立才会出现死锁。循环等待条件意味着占有并等待条件，这样四个条件并不完全独立。</p>
<p>一般来说，处理死锁问题有三种方法：</p>
<ul>
<li>通过协议来预防和避免死锁，确保系统不进入死锁状态。</li>
<li>可以允许系统进入死锁状态，然后检测它，并加以恢复。</li>
<li>可以忽视这个问题，认为死锁不可能在系统内发生。</li>
</ul>
<p>第三种解决为大多数操作系统所采用，包括Linux和windows。因此应用程序开发人员需要自己编写程序，以便处理死锁。</p>
<p>死锁预防 死锁避免 死锁检测 死锁恢复。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2020/ckep1k1bh000a7f9kfso55lms/</url>
    <content><![CDATA[<h3 id="动态规划与分治算法比较"><a href="#动态规划与分治算法比较" class="headerlink" title="动态规划与分治算法比较"></a>动态规划与分治算法比较</h3><p>分治算法将问题分为互不相交的子问题，递归地求解子问题，再将它们的解组合起来，求出原问题的解。与之相反，动态规划应用于子问题重叠的情况，即不同的子问题具有公共的子子问题（子问题的求解是递归进行的，将其分为更小的子子问题）。这种情况下，分治算法会做许多不必要的工作，它会反复求解那些公共子子问题。而动态规划算法对每个子子问题只求解一次，将其解保存在一个表格中，从而无需每次求解一个子子问题时都重新计算，避免了这种不必要的计算工作。</p>
<h3 id="求解问题类型"><a href="#求解问题类型" class="headerlink" title="求解问题类型"></a>求解问题类型</h3><p>动态规划方法通常用来求解最优化问题。这类问题可以有很多可行解，每个解都有一个值，我们希望找到寻找具有最优化（最大值或最小值）的解。我们称这样的解为问题的一个最优解，而不是最优解，因为可能有很多个解都能达到最优值。</p>
<h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><ol>
<li>刻画一个最优解的结构特征</li>
<li>递归的定义最优解的值</li>
<li>计算最优解的值，通常采用自底向上的方法。</li>
<li>利用计算出的信息构造一个最优解</li>
</ol>
<p>步骤1~3是动态规划算法求解问题的基础。如果我们仅仅需要维护一个最优解的值，而非解本身，可以忽略步骤4。如果确实需要做步骤4，有时就需要在执行步骤3的过程中维护一些额外信息，以便用来构造一个最优解。</p>
<h3 id="动态规划例题"><a href="#动态规划例题" class="headerlink" title="动态规划例题"></a>动态规划例题</h3><p>背包问题：<a href="https://anivian.github.io/pack-master/V2.pdf">https://anivian.github.io/pack-master/V2.pdf</a><br>寻路问题：<a href="https://www.cnblogs.com/hapjin/p/5705319.html">https://www.cnblogs.com/hapjin/p/5705319.html</a><br>最优矩阵链乘：<a href="https://blog.csdn.net/zhangxb35/article/details/38959047">https://blog.csdn.net/zhangxb35/article/details/38959047</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>网易雷火游戏研发笔试</title>
    <url>/2020/ckep1k1bl000e7f9kb42z5tni/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近，可能是投的岗位有点多，所以就收到各种笔试和面试通知，静下心来准备面试的时间开始变得琐碎了。对于具体的职业发展方向开始有点踌躇。无论选择哪个方向都是还有一堆的东西等着你去补。对于网易3个小时的笔试，4道编程题，时间依旧是十分紧张。在上次阿里笔试看了别的大佬AC的代码简洁清晰，这可能就是和那些ACMer的差距，比较人家的代码量是你的几十倍。网易还有一个特别的地方就是不允许使用本地IDE。四道题的题目分值不同，分别是10，20，30，40。总分100。</p>
<h3 id="第一题-完全二叉树的翻转-10分"><a href="#第一题-完全二叉树的翻转-10分" class="headerlink" title="第一题 完全二叉树的翻转 10分"></a>第一题 完全二叉树的翻转 10分</h3><p>输入n, m<br>n表示完全二叉树的层数<br>m表示需要进行翻转的节点<br>翻转：该节点的左右子树进行交换</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">输入</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">/\</td>
<td style="text-align:center">/\</td>
</tr>
<tr>
<td style="text-align:center">2 3</td>
<td style="text-align:center">2 3</td>
</tr>
<tr>
<td style="text-align:center">/\ /\</td>
<td style="text-align:center">/\ /\</td>
</tr>
<tr>
<td style="text-align:center">4 5 6 7</td>
<td style="text-align:center">4 5 <strong>7</strong> <strong>6</strong></td>
</tr>
<tr>
<td style="text-align:center">/\ /\ /\ /\</td>
<td style="text-align:center">/\ /\ /\ /\</td>
</tr>
<tr>
<td style="text-align:center">8 9 10 11 12 13 14 15</td>
<td style="text-align:center">8 9 10 11 <strong>14</strong> <strong>15</strong> <strong>12</strong> <strong>13</strong></td>
</tr>
</tbody>
</table>
</div>
<p>输入：<br>4 3<br>输出：<br>1<br>2<br>3<br>4<br>5<br>7<br>6<br>8<br>9<br>10<br>11<br>14<br>15<br>12<br>13</p>
<h4 id="题解-AC"><a href="#题解-AC" class="headerlink" title="题解(AC)"></a>题解(AC)</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 递归也可以用队列来代替， 递归写法简单，在时间通过的情况下可以选择递归</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (left &gt; arr.size() - <span class="number">1</span> || right &gt; arr.size() - <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// 左边遍历左子树， 右边遍历右子树</span></span><br><span class="line">			dfs(arr, <span class="number">2</span> * left, <span class="number">2</span> * right);</span><br><span class="line">			dfs(arr, <span class="number">2</span> * left + <span class="number">1</span>, <span class="number">2</span> * right + <span class="number">1</span>);</span><br><span class="line">			swap(arr[left], arr[right]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Solution s = Solution();</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">		<span class="keyword">int</span> size = <span class="number">1</span> &lt;&lt; n;</span><br><span class="line">		<span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(size, <span class="number">-1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">			arr[i] = i;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		s.dfs(arr, <span class="number">2</span> * m, <span class="number">2</span> * m + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第二题-福袋问题（20分）"><a href="#第二题-福袋问题（20分）" class="headerlink" title="第二题 福袋问题（20分）"></a>第二题 福袋问题（20分）</h3><p>第一行输入N，K，其中N代表有多少种商品,K代表每个福袋要包含K种不同的物品。<br>第二行输入N个整数表示，每种商品的数量</p>
<p>要求输出最多能凑成多少个福袋。<br>输入：<br>5 3<br>1 2 3 4 5<br>输出：<br>5<br>商品组合：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">商品1</th>
<th style="text-align:center">商品2</th>
<th style="text-align:center">商品3</th>
<th style="text-align:center">商品4</th>
<th style="text-align:center">商品5</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
</div>
<p>共计A1 B:2 C:3 D:4 E:5</p>
<h4 id="题解-AC-90-具体对一些N和K的限制条件忘了"><a href="#题解-AC-90-具体对一些N和K的限制条件忘了" class="headerlink" title="题解 (AC 90%, 具体对一些N和K的限制条件忘了)"></a>题解 (AC 90%, 具体对一些N和K的限制条件忘了)</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, k;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k) &#123;</span><br><span class="line">		<span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">		sort(arr.begin(), arr.end());</span><br><span class="line"><span class="comment">//      商品不足K则结束</span></span><br><span class="line">		<span class="keyword">while</span> (arr[n - k]) &#123;</span><br><span class="line">			ans += arr[n - k];</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">				arr[n - i] -= arr[n - k];</span><br><span class="line">			&#125;</span><br><span class="line">			sort(arr.begin(), arr.end());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第三题-打字问题-30分"><a href="#第三题-打字问题-30分" class="headerlink" title="第三题 打字问题 (30分)"></a>第三题 打字问题 (30分)</h3><p>输入N，N表示需要打的字数，<br>输出 打出至少N个字，需要的最少按键数。</p>
<p>基本操作：<br>操作1： X：没有选中内容，在当前位置输入X，如有选中内容，替换选中内容为X。按键数为1。<br>操作2： CTRL + A :选中全部内容。按键数为2。<br>操作3： CTRL + C :更新粘贴板的内容为选中内容， 初始时粘贴板为空。按键数为2。<br>操作4:  CTRL + V :复制粘贴板的内容输出。按键数为2。<br>操作5： ESC:取消当前选中状态。按键数为1</p>
<p>输入;<br>100</p>
<p>输出：<br>29</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">操作</th>
<th style="text-align:center">键数</th>
<th style="text-align:center">字数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">X</td>
<td style="text-align:center">7键</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">CTRL + A</td>
<td style="text-align:center">9键</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">CTRL + C</td>
<td style="text-align:center">11键</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">ESC</td>
<td style="text-align:center">12键</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">CTRL + V</td>
<td style="text-align:center">14键</td>
<td style="text-align:center">14</td>
</tr>
<tr>
<td style="text-align:center">CTRL + V</td>
<td style="text-align:center">16键</td>
<td style="text-align:center">21</td>
</tr>
<tr>
<td style="text-align:center">CTRL + V</td>
<td style="text-align:center">18键</td>
<td style="text-align:center">28</td>
</tr>
<tr>
<td style="text-align:center">CTRL + A</td>
<td style="text-align:center">20键</td>
<td style="text-align:center">28</td>
</tr>
<tr>
<td style="text-align:center">CTRL + C</td>
<td style="text-align:center">22键</td>
<td style="text-align:center">28</td>
</tr>
<tr>
<td style="text-align:center">ESC</td>
<td style="text-align:center">23键</td>
<td style="text-align:center">28</td>
</tr>
<tr>
<td style="text-align:center">CTRL + V</td>
<td style="text-align:center">25键</td>
<td style="text-align:center">56</td>
</tr>
<tr>
<td style="text-align:center">CTRL + V</td>
<td style="text-align:center">27键</td>
<td style="text-align:center">84</td>
</tr>
<tr>
<td style="text-align:center">CTRL + V</td>
<td style="text-align:center">29键</td>
<td style="text-align:center">112</td>
</tr>
</tbody>
</table>
</div>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><pre><code>①第一种情况在输入了i个字符的基础上，再输入10-i个，(i为从1到9)；
②第二种情况：输入了i个字符后，我复制这i个字符，取消选择，然后在后面进行多次粘贴，这里的i可以从1到10/2；循环取i，求最小值，需要注意的是，当10%i不为0时，需要再加上F(10%i)；
③第三种情况：输入了i个字符后，我还是复制粘贴这i个字符，但是上面②是复制之后，取消选择，在原来的后面继续粘贴；这里我复制之后，输入一个字符，将原来输入的都覆盖掉，然后再粘贴；
</code></pre><h4 id="题解-选自牛客ShareLe-https-blog-nowcoder-net-n-d43c430ce1434432862efc6f05513fbf"><a href="#题解-选自牛客ShareLe-https-blog-nowcoder-net-n-d43c430ce1434432862efc6f05513fbf" class="headerlink" title="题解 (选自牛客ShareLe  https://blog.nowcoder.net/n/d43c430ce1434432862efc6f05513fbf)"></a>题解 (选自牛客ShareLe  <a href="https://blog.nowcoder.net/n/d43c430ce1434432862efc6f05513fbf">https://blog.nowcoder.net/n/d43c430ce1434432862efc6f05513fbf</a>)</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> N;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; N) &#123;</span><br><span class="line">		<span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(N + <span class="number">1</span>, <span class="number">99999</span>)</span></span>;</span><br><span class="line">		dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">		dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">				dp[i] = min(dp[i], dp[i - j] + j); <span class="comment">//情况①</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i / <span class="number">2</span>; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				dp[i] = min(dp[i], dp[j] + i / j * <span class="number">2</span> + <span class="number">3</span> + dp[i%j]); <span class="comment">//情况②</span></span><br><span class="line">				dp[i] = min(dp[i], dp[j] + i / j * <span class="number">2</span> + <span class="number">5</span>); <span class="comment">//情况③</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; dp[N] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第四题-开心消消乐-40分"><a href="#第四题-开心消消乐-40分" class="headerlink" title="第四题 开心消消乐 (40分)"></a>第四题 开心消消乐 (40分)</h3><p>输入一个m,n m表示行数， n表示列数， 输入一串数字，从左到右，从上到下填充，随后还有一串数字，表示缓冲队列Q<br>消除规则;<br>同一行或者同一列有三个相同的数字则消除<br>输入：<br>6 4 123657133245111998578392 123456<br>输出<br>126657</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">输入</th>
<th style="text-align:center">置零</th>
<th style="text-align:center">下降</th>
<th style="text-align:center">填充</th>
<th style="text-align:center">置零</th>
<th style="text-align:center">填充</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">123657</td>
<td style="text-align:center">023657</td>
<td style="text-align:center">000657</td>
<td style="text-align:center">123657</td>
<td style="text-align:center">120657</td>
<td style="text-align:center">126657</td>
</tr>
<tr>
<td style="text-align:center">133245</td>
<td style="text-align:center">033245</td>
<td style="text-align:center">023245</td>
<td style="text-align:center">423245</td>
<td style="text-align:center">420245</td>
<td style="text-align:center">420245</td>
</tr>
<tr>
<td style="text-align:center">111998</td>
<td style="text-align:center">000998</td>
<td style="text-align:center">033998</td>
<td style="text-align:center">533998</td>
<td style="text-align:center">530998</td>
<td style="text-align:center">530998</td>
</tr>
<tr>
<td style="text-align:center">578392</td>
<td style="text-align:center">578392</td>
<td style="text-align:center">578392</td>
<td style="text-align:center">578392</td>
<td style="text-align:center">578392</td>
<td style="text-align:center">578392</td>
</tr>
</tbody>
</table>
</div>
<h3 id="题解（自己写的代码写完没来得及调试时间就到了，所以此处引用一个类似题目的代码，日后有时间再来修改）"><a href="#题解（自己写的代码写完没来得及调试时间就到了，所以此处引用一个类似题目的代码，日后有时间再来修改）" class="headerlink" title="题解（自己写的代码写完没来得及调试时间就到了，所以此处引用一个类似题目的代码，日后有时间再来修改）"></a>题解（自己写的代码写完没来得及调试时间就到了，所以此处引用一个类似题目的代码，日后有时间再来修改）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  huawei</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by SteveWong on 11/10/2016.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016 SteveWong. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;cstdlib&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LEN = <span class="number">8</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pmap</span><span class="params">(<span class="keyword">int</span> <span class="built_in">map</span>[][LEN])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LEN; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; LEN; ++j)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">map</span>[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查以(i,j)为中心的点, 看是否可以消除</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> <span class="built_in">map</span>[][LEN], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span><span class="comment">// 保证i、j不越界,</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (</span><br><span class="line">		(i - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; i + <span class="number">1</span> &lt; LEN &amp;&amp; <span class="built_in">map</span>[i - <span class="number">1</span>][j] == <span class="built_in">map</span>[i][j] &amp;&amp; <span class="built_in">map</span>[i][j] == <span class="built_in">map</span>[i + <span class="number">1</span>][j])</span><br><span class="line">		|| (j - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; j + <span class="number">1</span> &lt; LEN &amp;&amp; <span class="built_in">map</span>[i][j - <span class="number">1</span>] == <span class="built_in">map</span>[i][j] &amp;&amp; <span class="built_in">map</span>[i][j] == <span class="built_in">map</span>[i][j + <span class="number">1</span>])</span><br><span class="line">		|| (i - <span class="number">2</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[i - <span class="number">2</span>][j] == <span class="built_in">map</span>[i - <span class="number">1</span>][j] &amp;&amp; <span class="built_in">map</span>[i - <span class="number">1</span>][j] == <span class="built_in">map</span>[i][j])</span><br><span class="line">		|| (j - <span class="number">2</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[i][j - <span class="number">2</span>] == <span class="built_in">map</span>[i][j - <span class="number">1</span>] &amp;&amp; <span class="built_in">map</span>[i][j - <span class="number">1</span>] == <span class="built_in">map</span>[i][j])</span><br><span class="line">		|| (i + <span class="number">2</span> &lt; LEN &amp;&amp; <span class="built_in">map</span>[i + <span class="number">2</span>][j] == <span class="built_in">map</span>[i + <span class="number">1</span>][j] &amp;&amp; <span class="built_in">map</span>[i + <span class="number">1</span>][j] == <span class="built_in">map</span>[i][j])</span><br><span class="line">		|| (j + <span class="number">2</span> &lt; LEN &amp;&amp; <span class="built_in">map</span>[i][j + <span class="number">2</span>] == <span class="built_in">map</span>[i][j + <span class="number">1</span>] &amp;&amp; <span class="built_in">map</span>[i][j + <span class="number">1</span>] == <span class="built_in">map</span>[i][j])</span><br><span class="line">		)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">swapAndJudge</span><span class="params">(<span class="keyword">int</span> m[][LEN], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span><span class="comment">// 保证i、j不越界, 应该对被swap的两个点都做纵向和横向的检查</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">map</span>[LEN][LEN];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">0</span>; ii &lt; LEN; ++ii)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> jj = <span class="number">0</span>; jj &lt; LEN; ++jj)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">map</span>[ii][jj] = m[ii][jj];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 原来就可以消除</span></span><br><span class="line">	<span class="keyword">if</span> (check(<span class="built_in">map</span>, i, j))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;no need to swap at (%d, %d)\n&quot;</span>, i, j);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 只需要向下换和向右换</span></span><br><span class="line">	<span class="comment">// 向下换</span></span><br><span class="line">	<span class="keyword">if</span> (i + <span class="number">1</span> &lt; LEN)</span><br><span class="line">	&#123;</span><br><span class="line">		swap(<span class="built_in">map</span>[i + <span class="number">1</span>][j], <span class="built_in">map</span>[i][j]);</span><br><span class="line">		<span class="keyword">if</span> (check(<span class="built_in">map</span>, i, j))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;# swap and sweap! (%d, %d)\n&quot;</span>, i, j);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (check(<span class="built_in">map</span>, i + <span class="number">1</span>, j))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;# swap and sweap! (%d, %d)\n&quot;</span>, i + <span class="number">1</span>, j);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		swap(<span class="built_in">map</span>[i + <span class="number">1</span>][j], <span class="built_in">map</span>[i][j]);<span class="comment">// 换回来</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 向右换</span></span><br><span class="line">	<span class="keyword">if</span> (j + <span class="number">1</span> &lt; LEN)</span><br><span class="line">	&#123;</span><br><span class="line">		swap(<span class="built_in">map</span>[i][j + <span class="number">1</span>], <span class="built_in">map</span>[i][j]);</span><br><span class="line">		<span class="keyword">if</span> (check(<span class="built_in">map</span>, i, j))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;# swap and sweap! (%d, %d)\n&quot;</span>, i, j);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (check(<span class="built_in">map</span>, i, j + <span class="number">1</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;# swap and sweap! (%d, %d)\n&quot;</span>, i, j + <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		swap(<span class="built_in">map</span>[i][j + <span class="number">1</span>], <span class="built_in">map</span>[i][j]);<span class="comment">// 换回来</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findMinSwap</span><span class="params">(<span class="keyword">int</span> <span class="built_in">map</span>[][LEN])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LEN; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; LEN; ++j)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (swapAndJudge(<span class="built_in">map</span>, i, j))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;gotcha! (%d, %d)\n&quot;</span>, i, j);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	srand(<span class="keyword">unsigned</span>(time(<span class="number">0</span>)));</span><br><span class="line">	<span class="keyword">int</span> p[LEN][LEN];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LEN; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; LEN; ++j)</span><br><span class="line">		&#123;</span><br><span class="line">			p[i][j] = rand() % <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;xiaoxiaole!\n&quot;</span>;</span><br><span class="line">	findMinSwap(p);</span><br><span class="line">	pmap(p);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>每次考试都是意犹未尽的感觉，还是有很多完善的地方，很多知识点还得多练习。刷题目前可能将近100道，还是得多刷多码。</p>
]]></content>
      <categories>
        <category>招聘</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>网易互联网笔试</title>
    <url>/2020/ckep1k1bm000g7f9kg54d0f9m/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>中午被麻辣香锅搞得死去活来，下午被网易笔试搞得死去活来。四道题AC1.25,第三题没看，第四题是强连通量，关于图的题目是我的薄弱，得去花些时间看看。</p>
<h3 id="第一题-回文串"><a href="#第一题-回文串" class="headerlink" title="第一题 回文串"></a>第一题 回文串</h3><p>给定一个长度为n(n&lt;=1e3)的字符串，可以在后面加无限多的字母，问能组成的最短回文串是多长？<br>解法一：注意到n比较小，直接暴力<br>解法二：可以用manachar算法，算出原串最长回文后缀的长度，然后就可以得到最短的字符串了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">string</span> &amp;s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = start, j = end;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j &amp;&amp; s[i] == s[j]) &#123;</span><br><span class="line">        ++i, --j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i &gt;= j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s; <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> length = s.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (check(s, i, length - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> prefix = s.substr(<span class="number">0</span>, i);</span><br><span class="line">    reverse(prefix.begin(), prefix.end());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s + prefix &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第二题-物品价值"><a href="#第二题-物品价值" class="headerlink" title="第二题 物品价值"></a>第二题 物品价值</h3><p>现在有n个物品，每个物品都有一个价值，现在想将这些物品分给两个人，要求这两个人分到的物品价值总和相同(个数可以不同，总价值相同即可)，剩下的物品就要扔掉，现在想知道最少需要扔多少价值的物品才能满足要求分给两个人。<br>输入：</p>
<ul>
<li>第一行输入一个整数T，代表有T组测试数据</li>
<li>对于每一组测试数据，一行输入一个整数n，代表物品的个数</li>
<li>接下来n个数，a[i]代表每一个物品的价值</li>
<li>1 &lt;= T &lt;= 10</li>
<li>1 &lt;= n &lt;= 15</li>
<li>1 &lt;= a[i] &lt;= 100000<br>输出：</li>
<li>每一行输出最少需要扔掉多少价值的物品</li>
</ul>
<p>示例：<br>输入<br>1<br>5<br>30 60 5 15 30<br>输出<br>20</p>
<p>说明<br>样例解释，扔掉第三个和第四个物品，然后将第一个物品和第五个物品给第一个人，第二个物品给第二个人，每个人分到的价值为60，扔掉的价值为20。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> siz=<span class="number">1500000</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>],dp[siz+<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n, i, j, ans, sum;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">            sum += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span> (j = sum; j &gt;= a[i]; --j)</span><br><span class="line">            dp[j] = dp[j] | dp[j-a[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        ans = sum;</span><br><span class="line">        <span class="keyword">for</span> (i = sum; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span>( i % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(dp[i] &amp;&amp; dp[i/<span class="number">2</span>]) &#123;</span><br><span class="line">                ans = sum - i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第三题-排队买票"><a href="#第三题-排队买票" class="headerlink" title="第三题 排队买票"></a>第三题 排队买票</h3><p>题目描述<br>n(n&lt;=2000)个人排队买票，第i个人要么单独买票，要么和后面一个人一起买（反过来，就是可以和前面一个人买），单独买花费时间a[i]，一起买是b[i]，求所有人买完票的最短时间。开始时间是早上08:00:00 am，输出结束时间。</p>
<p>分析<br>动态规划，dp[i]表示第i个人买完票所需要的时间。对于每一个人他可以有两个选择，要么单独买票，那么需要的总的时间就是dp[i-1] + a[i]，要么和前一个人一起买票，需要的总的时间就是dp[i-2] + b[i]。最后输出的时候注意格式。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2222</span>], b[<span class="number">2222</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2222</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>, dp[<span class="number">1</span>] = a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        dp[i] = min(dp[i - <span class="number">1</span>] + a[i], dp[i - <span class="number">2</span>] + b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> hour = dp[n] / <span class="number">3600</span> + <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">int</span> minutes = dp[n] % <span class="number">3600</span> / <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">int</span> seconds = dp[n] % <span class="number">3600</span> % <span class="number">60</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d &quot;</span>, hour, minutes, seconds);</span><br><span class="line">    <span class="built_in">puts</span>(hour &lt;= <span class="number">12</span> ? <span class="string">&quot;am&quot;</span> : <span class="string">&quot;pm&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第四题-相互认可"><a href="#第四题-相互认可" class="headerlink" title="第四题 相互认可"></a>第四题 相互认可</h3><p>题目描述<br>a教授认可b教授，b教授认可c教授，那么a也认可c。现有n (小于50000)个教授，m（小于600000）个认可，可能自己认可自己，也可能重复。求互相认可的教授有多少对？<br>分析<br>学过强联通分量的应该可以一下子看出来这个就是要求强联通分量，每个强联通分量里的所有教授都是互相认可的。。没学过的话可以尝试暴力解解。 </p>
<p>思考如果改变下条件，只要a认可b，那么b就默认认可a，这个时候求互相认可的教授有多少对该怎么算呢？</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">555</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">int</span> low[maxn], num[maxn], dfn, cnt;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="keyword">int</span> sccno[maxn];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    st.push(u);</span><br><span class="line">    low[u] = num[u] = ++dfn;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = G[u][i];</span><br><span class="line">        <span class="keyword">if</span> (!num[v])&#123;</span><br><span class="line">            dfs(v);</span><br><span class="line">            low[u] = min(low[u], low[v]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!sccno[v]) &#123;</span><br><span class="line">            low[u] = min(low[u], num[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (low[u] == num[u]) &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">            tmp++;</span><br><span class="line">            sccno[v] = cnt;</span><br><span class="line">            <span class="keyword">if</span> (u == v) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ans += tmp * (tmp - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    cnt = dfn = <span class="number">0</span>;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(sccno, <span class="number">0</span>, <span class="keyword">sizeof</span>(sccno));</span><br><span class="line">    <span class="built_in">memset</span>(low, <span class="number">0</span>, <span class="keyword">sizeof</span>(low));</span><br><span class="line">    <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!num[i]) dfs(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b; <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        G[a].push_back(b);</span><br><span class="line">    &#125;</span><br><span class="line">    tarjan(n);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>可能还是得多花些时间在刷题上，在这参加的四五次笔试中,目标还是得冲击AC3.0 4AC可能有点难，   下次可能还是得自己找四道题，然后花2小时看看能做多少。</p>
<p>内容部分摘抄自公众号：<br><a href="https://mp.weixin.qq.com/s?__biz=MzI5MDA4ODczOA==&amp;mid=2648028133&amp;idx=1&amp;sn=4c819b2b17cb50aa40855468f7e2ef88&amp;chksm=f40421a8c373a8bed46bad37341a5c7b9c0f8c5a1d441774b3cfdfd6c5d9fe7bba213605c31c&amp;scene=158#rd">https://mp.weixin.qq.com/s?__biz=MzI5MDA4ODczOA==&amp;mid=2648028133&amp;idx=1&amp;sn=4c819b2b17cb50aa40855468f7e2ef88&amp;chksm=f40421a8c373a8bed46bad37341a5c7b9c0f8c5a1d441774b3cfdfd6c5d9fe7bba213605c31c&amp;scene=158#rd</a></p>
]]></content>
      <categories>
        <category>招聘</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>7.31 阿里笔试</title>
    <url>/2020/ckep1k1bo000l7f9kgdhygp4j/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一小时两道题， 吃完晚饭就整装待发准备做了，还是有点紧张的。想要做出一道就勉强混过去。</p>
<h3 id="第一题-带牛去吃草多少种组合方式"><a href="#第一题-带牛去吃草多少种组合方式" class="headerlink" title="第一题 带牛去吃草多少种组合方式"></a>第一题 带牛去吃草多少种组合方式</h3><p>小明带着n头牛 有m种颜色，每头牛都是互异的。<br>小明带任意头牛出去吃草。<br>请问有多少种组合？<br>种类太多 取模 1e9+7<br>1&lt;= n &lt;= 1e9, 1&lt;= m &lt;= 1e9</p>
<p>例：<br>输入：<br>3， 2</p>
<p>输出<br>27</p>
<p>举例<br>带0头 1<br>带1头 3 <em> 2<br>带2头 3 </em> 2 <em> 2<br>带3头 1 </em> 2 <em> 2 </em> 2<br>1 + 6 + 12 + 8 = 27</p>
<h4 id="自己猜测的题解"><a href="#自己猜测的题解" class="headerlink" title="自己猜测的题解"></a>自己猜测的题解</h4><p>我当时看到这个就想到杨辉三角,当时没过，我当时忘了取模1e9但是不知道自己思路是否正确，因为我当时没思路就跳到第二题了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">long</span> <span class="keyword">long</span>) <span class="built_in">pow</span>(m + <span class="number">1</span>, n) % <span class="number">1e9</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<h3 id="第二题-迷宫中的最短路径"><a href="#第二题-迷宫中的最短路径" class="headerlink" title="第二题 迷宫中的最短路径"></a>第二题 迷宫中的最短路径</h3><p>第一行输入，n,m,p 在（1，500）之间<br>随后输入n行m长度的字符串 C代表陆地， S代表海洋<br>随后p行按照bx, by, ex, ey<br>bx,by代表起点 ex,ey代表终点</p>
<p>输出起点到终点所需要最少体力</p>
<p>移动规则：<br>只能上下左右四个方向，<br>陆地到陆地消耗3体力，<br>海洋到海洋消耗2体力，<br>海洋到陆地或陆地到海洋消耗5体力，</p>
<p>输入：<br>4 4 2<br>CCCS<br>SSSS<br>CSCS<br>SSCC<br>1 1 4 3<br>3 1 1 3</p>
<p>输出：<br>13<br>14</p>
<h4 id="事后多花了半小时调通的题解"><a href="#事后多花了半小时调通的题解" class="headerlink" title="事后多花了半小时调通的题解"></a>事后多花了半小时调通的题解</h4><p>没机会扔进去测试一下对不对了。 感觉自己蛮代码的速度好慢呀。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> xr[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> yr[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m ,p;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">inMat</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;=<span class="number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> bx, <span class="keyword">int</span> by, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;mat)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">res</span><span class="params">(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(m , <span class="number">0x3f3f3f</span>))</span></span>;</span><br><span class="line">    q.push(<span class="built_in">make_pair</span>(bx, by));</span><br><span class="line">    res[bx][by] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tmp = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">int</span> tx = tmp.first, ty = tmp.second;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span> ;i ++) &#123;</span><br><span class="line">        <span class="comment">//判断是否在界内</span></span><br><span class="line">            <span class="keyword">if</span>(inMat(tx+xr[i], ty + yr[i])) &#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[tx][ty] == mat[tx + xr[i]][ty+yr[i]]) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(mat[tx][ty] == <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(res[tx + xr[i]][ty+yr[i]] &gt; res[tx][ty] + <span class="number">3</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            res[tx + xr[i]][ty+yr[i]] = res[tx][ty] + <span class="number">3</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//无更新， 跳过</span></span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(mat[tx][ty] == <span class="string">&#x27;S&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(res[tx + xr[i]][ty+yr[i]] &gt; res[tx][ty] + <span class="number">2</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            res[tx + xr[i]][ty+yr[i]] = res[tx][ty] + <span class="number">2</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(res[tx + xr[i]][ty+yr[i]] &gt; res[tx][ty] + <span class="number">5</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        res[tx + xr[i]][ty+yr[i]] = res[tx][ty] + <span class="number">5</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//有更新，进队</span></span><br><span class="line">                q.push(<span class="built_in">make_pair</span>(tx+xr[i], ty + yr[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//cin &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span></span><br><span class="line">    n = <span class="number">4</span>;</span><br><span class="line">    m = <span class="number">4</span>;</span><br><span class="line">    p = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//vector&lt;string&gt; mat(n, &quot;&quot;);</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; mat;</span><br><span class="line">    mat.push_back(<span class="string">&quot;CCCS&quot;</span>);</span><br><span class="line">    mat.push_back(<span class="string">&quot;SSSS&quot;</span>);</span><br><span class="line">    mat.push_back(<span class="string">&quot;CSCS&quot;</span>);</span><br><span class="line">    mat.push_back(<span class="string">&quot;SSCC&quot;</span>);</span><br><span class="line"><span class="comment">//    for(int i = 0; i &lt; n; i++) &#123;</span></span><br><span class="line"><span class="comment">//        cin &gt;&gt; mat[i];</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    vector&lt;vector&lt;int&gt;&gt; be(p,vector&lt;int&gt;(4, 0) );</span></span><br><span class="line"><span class="comment">//    for(int i = 0; i &lt; p; i++) &#123;</span></span><br><span class="line"><span class="comment">//        for(int j = 0 ; j &lt; 4; j++) &#123;</span></span><br><span class="line"><span class="comment">//            cin &gt;&gt; be[i][j];</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; be = &#123;&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>&#125;, &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>&#125;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; p; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(m , <span class="number">0x3f3f3f</span>))</span></span>;</span><br><span class="line">        <span class="comment">// 题目中列为x， 行为y</span></span><br><span class="line">        dp = bfs(be[i][<span class="number">1</span>] - <span class="number">1</span>, be[i][<span class="number">0</span>] - <span class="number">1</span>, mat);</span><br><span class="line">        <span class="keyword">int</span> ex = be[i][<span class="number">3</span>], ey = be[i][<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp[ex - <span class="number">1</span>][ey - <span class="number">1</span>]&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这次笔试我两道题都是0， 不知道会不会连面试的机会都没有， 每道题的题解也不知道对不对，有没有参加了并AC的大佬来指点一下迷津。刷题还得刷呀，code速度太慢了，思路没那么清晰，都是码一点想一点。我好菜呀，阿里好难。</p>
<h3 id="抄袭一下AC的答案"><a href="#抄袭一下AC的答案" class="headerlink" title="抄袭一下AC的答案"></a>抄袭一下AC的答案</h3><h4 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">作者：zyx_xiao</span><br><span class="line">链接：https:<span class="comment">//www.nowcoder.com/discuss/464106?type=0&amp;order=0&amp;pos=7&amp;page=1&amp;channel=666&amp;source_id=discuss_tag</span></span><br><span class="line">来源：牛客网</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll ;</span><br><span class="line">ll n, m;</span><br><span class="line"><span class="function">ll <span class="title">powmod</span><span class="params">(ll x,ll n ,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1L</span>L)  res=res*x%mod ;</span><br><span class="line">        x=x*x%mod;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll mod = <span class="number">1000000007</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    m++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, powmod(m, n, mod));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">作者：zyx_xiao</span><br><span class="line">链接：https:<span class="comment">//www.nowcoder.com/discuss/464106?type=0&amp;order=0&amp;pos=7&amp;page=1&amp;channel=666&amp;source_id=discuss_tag</span></span><br><span class="line">来源：牛客网</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"><span class="keyword">char</span> mp[<span class="number">505</span>][<span class="number">505</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">505</span>][<span class="number">505</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> bx,by,ex,ey;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    node(<span class="keyword">int</span> xx,<span class="keyword">int</span> yy):x(xx),y(yy)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, mp[i]);</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; m ; j++)</span><br><span class="line">                vis[i][j] = <span class="number">10000000</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;bx, &amp;by, &amp;ex, &amp;ey);</span><br><span class="line">        bx--;by--;ex--;ey--;</span><br><span class="line">        vis[bx][by] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;node&gt; que;</span><br><span class="line">        que.push(node(bx, by));</span><br><span class="line">        <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">            node t = que.front();</span><br><span class="line">            que.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">4</span> ; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = t.x + dx[i];</span><br><span class="line">                <span class="keyword">int</span> y = t.y + dy[i];</span><br><span class="line">                <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=n || y&lt;<span class="number">0</span> || y&gt;=m) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> w = <span class="number">5</span>;</span><br><span class="line">                <span class="keyword">if</span>(mp[x][y]==mp[t.x][t.y])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(mp[x][y]==<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">                        w = <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">else</span> w = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(vis[x][y] &lt;= vis[t.x][t.y]+w)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                vis[x][y] = vis[t.x][t.y] + w;</span><br><span class="line">                que.push(node(x,y));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, vis[ex][ey]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>招聘</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>华为笔试总结</title>
    <url>/2020/ckep1k1bp000m7f9k7kmt3jfh/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>中午预约的机考时间，记错成了第二天晚上才开始。结果，晚上7点多和朋友过生日的时候，收到了短信，提醒考试已经开始快半小时了。赶紧跑了回来。内心一百只草泥马飞过。总体而言就算给我更多的时间不一定思路就清晰了。</p>
<h3 id="1-求余数"><a href="#1-求余数" class="headerlink" title="1.求余数"></a>1.求余数</h3><p>给定两个数，将两个数的各位求和在求余数。<br>例如：<br>输入：<br>123 11</p>
<p>输出：<br>0</p>
<p>（1+2+3）%（1+1） = 6%2 = 0；</p>
<p> <strong>题解</strong><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> m, <span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> am = <span class="number">0</span>, an = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(m) &#123;</span><br><span class="line">        am += m % <span class="number">10</span>;</span><br><span class="line">        m /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(n) &#123;</span><br><span class="line">        an += n % <span class="number">10</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> am % an;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 怕数字范围溢出， 得回去记一下每个数据类型的表示范围。</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> m, n;</span><br><span class="line">    <span class="comment">// 牛客对于简单的测试需要循环输入。</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; solution(m, n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>这道题画了没几分钟，主要用来适应环境的。</p>
<h3 id="2-买最少的东西"><a href="#2-买最少的东西" class="headerlink" title="2. 买最少的东西"></a>2. 买最少的东西</h3><p>有五件商品，价格分别是1，3，7，11，13.给定的钱，和各商品数量，然后购买最少商品的数量， 务必将钱花完。<br>例如：<br>输入：<br>1 2 3 4 5<br>30<br>输出：<br>4</p>
<p>2 <em> 13 + 1 </em> 3 + 1 * 1 = 30；<br>2 + 1 + 1 = 4；</p>
<p><strong>题解</strong><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; price = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> V;</span><br><span class="line">    <span class="built_in">vector</span>&lt;pii&gt; packs;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt, k = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; cnt;</span><br><span class="line">        <span class="keyword">while</span>(cnt &gt; k)&#123; <span class="comment">//混合背包转01背包</span></span><br><span class="line">            packs.push_back(&#123;k, k * price[i]&#125;);</span><br><span class="line">            cnt -= k;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt) packs.push_back(&#123;cnt, cnt * price[i]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; V;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(V + <span class="number">1</span>, <span class="number">0x3f3f3f</span>)</span></span>;<span class="comment">//dp[i],花费i，数量最少</span></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; pack: packs) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = V; j &gt;= pack.Y; --j) &#123;</span><br><span class="line">            dp[j] = min(dp[j], dp[j - pack.Y] + pack.X);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[V];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="3-给定距离的不同走法"><a href="#3-给定距离的不同走法" class="headerlink" title="3. 给定距离的不同走法"></a>3. 给定距离的不同走法</h3><p>给定距离，并给出各种步长，nums[0]…num[n -1],请问有多少种走法（不考虑走路的顺序）先走短的再走长的，步长互异。</p>
<p>例如：<br>输入：<br>4<br>1 2</p>
<p>输出：<br>3<br>1+1+1+1 = 4<br>1+1+2 = 4；<br>2+2 = 4<br><strong>题解</strong><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; num)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.size(); i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = num[i]; j &lt;= n; j++) &#123;</span><br><span class="line">            dp[j] += dp[j - num[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="comment">// 这里不能想牛客那样推出，  我就定义输入零结束输入</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; temp) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!temp) <span class="keyword">break</span>;</span><br><span class="line">        num.push_back(temp);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sort(num.begin(), num.end());</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; solution(n, num)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>后面两个解答都是参考了牛客博主xinxin1000的答案，还附赠了背包问题学习大礼包<a href="https://anivian.github.io/pack-master/V2.pdf">https://anivian.github.io/pack-master/V2.pdf</a><br>超级感谢这位来自清华的小姐姐。<br>希望明天面试顺利～～～～</p>
]]></content>
      <categories>
        <category>招聘</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>拼多多ios客户端笔试</title>
    <url>/2020/ckep1k1br000q7f9k1vj9ajvy/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这半年一直再做客户端，但是我们的客户端与实际大厂的客户端，又不尽相同。客户端可以分为ios，Android，windows，mac等，ios主要要求Object-C和Swift, Android主要用Java。Windows和Mac可能要求C++。所以就项目基础来说去做Windows下的客户端可能会有一定优势，看了这多岗位，感觉字节的C++ 客户端研发工程师-抖音/火山直播这个是比较接近的。当然还有游戏客户端，游戏客户端往往还要求你熟悉一门脚本语言，因为纯c++的游戏，马上就会被外挂搞得毫无游戏体验，脚本的加密，让外挂的制作难度提升了一个档次。除此之外，还会要求你有主流游戏引擎的操作经验，图形学接口的熟悉，shader的编写能力等等。相比华为的宽泛要求，这些细致的要求让你忘而却步。现在的主流市场已经往移动端发展，那么在主机上制作客户端的岗位又会渐渐缩水。ios客户端和Android客户端相比较而言更加吃香。</p>
<p>如果继续学习C++，去华为阿里这样的地方做底层开发，操作系统内核，数据库可能是比较好的处理。还有就是做游戏，计算机图形学的相关内容。现在准备java去达到一个面试水平，应该是比较难的。所以现阶段，应该还是好好看看操作系统，数据库相关内容的书籍。图形学和游戏引擎的熟悉可能稍微滞后一些，感觉相对而言会比较没那么快上手。简单做个fps游戏，作为简历上的闪光点，当然也是一个值得考虑的事情。</p>
<p>前一段时间已经投了五六家大厂，接下来的半个月应该稍微静下心来，继续准备，先不投一段时间，因为接踵而至的笔试和面试，会让你喘不过气，每天都处于这个没面好，那个没考好的焦虑当中。</p>
<h3 id="第一题-单项选择-5道"><a href="#第一题-单项选择-5道" class="headerlink" title="第一题 单项选择 (5道)"></a>第一题 单项选择 (5道)</h3><p>主要考察OBJECT-C的内容 一个比较关键的字眼就是KVC。</p>
<p>KVC（Key-value coding）键值编码，就是指iOS的开发中，可以允许开发者通过Key名直接访问对象的属性，或者给对象的属性赋值。而不需要调用明确的存取方法。这样就可以在运行时动态地访问和修改对象的属性。而不是在编译时确定，这也是iOS开发中的黑魔法之一。很多高级的iOS开发技巧都是基于KVC实现的。</p>
<p>作者：jackyshan<br>链接：<a href="https://www.jianshu.com/p/b9f020a8b4c9">https://www.jianshu.com/p/b9f020a8b4c9</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h3 id="第二题-多项选择（5道）"><a href="#第二题-多项选择（5道）" class="headerlink" title="第二题 多项选择（5道）"></a>第二题 多项选择（5道）</h3><p>主要印象就是涉及到资源池资源释放什么的知识点，因为对ios一窍不通，所以就连题目也记不住了。</p>
<h3 id="第三题-飞行棋-25分"><a href="#第三题-飞行棋-25分" class="headerlink" title="第三题 飞行棋 (25分)"></a>第三题 飞行棋 (25分)</h3><p>输入<br>第一行 输入K，N，K表示距离终端的距离，N表示丢骰子的次数<br>第二行 输入N个数 表示每次丢骰子的点数大小。<br>输出 如果在<strong>N步之前</strong>到达终点则打印”paradox”<br>否则输入 距离终点的距离，和回退的次数。两个数自间用空格隔开。<br>回退就是飞行棋一样到终点多了的就往回走。</p>
<p>例：<br>输入：<br>10 3<br>6 6 6<br>输出：<br>4 2</p>
<h4 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h4><p>就是这个N步之前阻止了很多人AC。</p>
<h4 id="题解（AC-100-）"><a href="#题解（AC-100-）" class="headerlink" title="题解（AC 100%）"></a>题解（AC 100%）</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k, n;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; k &gt;&gt; n) &#123;</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> tmp;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">			k -= tmp;</span><br><span class="line">			<span class="comment">// 回退</span></span><br><span class="line">			<span class="keyword">if</span> (k &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				k = -k;</span><br><span class="line">				cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// N步之前到达终点</span></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">0</span> &amp;&amp; i != n - <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;paradox&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; k &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第四题-相同的骰子-25分"><a href="#第四题-相同的骰子-25分" class="headerlink" title="第四题 相同的骰子 (25分)"></a>第四题 相同的骰子 (25分)</h3><p>输入N N表示输入骰子的个数<br>随后输入N个骰子，每个数字顺序上下左右前后。<br>输出<br>第一行输出有多少个不同的骰子<br>第二行输出每种骰子的个数</p>
<p>例：<br>输入：<br>2<br>123456<br>625314</p>
<p>输出：<br>2<br>1 1</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这道题没找到题解，讲讲思路吧，我定义了三个函数对骰子做变换，三个自由度，每个自由度可以动0-3下，然后做比较。这个算法的时间复杂度分析。变换与比较的时间是常数C,每加入一个骰子都与前面N-1个骰子比较。估算时间复杂度为o(N^2);这算是暴力解法，AC应该是AC不了。</p>
<h3 id="第五题-吃饭问题-25分"><a href="#第五题-吃饭问题-25分" class="headerlink" title="第五题 吃饭问题 (25分)"></a>第五题 吃饭问题 (25分)</h3><p>输入：<br>第一行输入M,N,T M表示午餐的套餐数，N表示晚餐的套餐数,T表示最要要达到的美味值<br>随后M行输入Xi, Yi, Xi表示热量值， Yi表示美味值<br>随后N行输入Xj, Yj, Xj表示热量值， Yj表示美味值<br>输出：<br>求在满足美味值的前提下，最少摄入的热量。可以选择不吃饭或者只吃一顿饭，一顿饭只能吃一种套餐。<br>如果达不到美味值，输出-1</p>
<p>例子：<br>输入<br>3 1 8<br>4 3<br>3 5<br>8 9<br>2 5<br>输出<br>6</p>
<h4 id="题解（自己写了个N-2的算法只能AC40-，这个是别人AC94-的代码）"><a href="#题解（自己写了个N-2的算法只能AC40-，这个是别人AC94-的代码）" class="headerlink" title="题解（自己写了个N^2的算法只能AC40%，这个是别人AC94%的代码）"></a>题解（自己写了个N^2的算法只能AC40%，这个是别人AC94%的代码）</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">作者：澹台棋晴</span><br><span class="line">链接：https:<span class="comment">//www.nowcoder.com/discuss/465070?type=all&amp;order=time&amp;pos=&amp;page=1&amp;channel=-2&amp;source_id=search_all</span></span><br><span class="line">来源：牛客网</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vector&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;algorithm&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> N,M,T;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;a,<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.first&gt;b.first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M&gt;&gt;T;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">int</span> maxYlunch=<span class="number">0</span>,maxYdinner=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;lunch;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;dinner;</span><br><span class="line">    <span class="keyword">while</span>(N--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        lunch.push_back(<span class="built_in">make_pair</span>(y,x));</span><br><span class="line">        maxYlunch = max(maxYlunch,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(M--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        dinner.push_back(<span class="built_in">make_pair</span>(y,x));</span><br><span class="line">        maxYdinner = max(maxYdinner,y);</span><br><span class="line">        <span class="comment">//cout&lt;&lt;&quot;  sdfsdfsd&quot;&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;maxYdinner&lt;&lt;&quot; &quot;&lt;&lt;maxYlunch&lt;&lt;&quot; &quot;&lt;&lt;T;</span></span><br><span class="line">    <span class="keyword">if</span>((maxYlunch+maxYdinner)&lt;T)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(lunch.begin(),lunch.end());</span><br><span class="line">    sort(dinner.begin(),dinner.end(),cmp);<span class="comment">//从小到大排序否则超时了</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;&quot;  sdfsdfsd1&quot;&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">int</span> fat=<span class="number">100000</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lunch.size();i++)&#123;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;lunch.size()&lt;&lt;&quot; &quot;;</span></span><br><span class="line">        <span class="comment">//cout&lt;&lt;&quot;  sdfsdfsd2&quot;&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(lunch[i].first&gt;=T)&#123;</span><br><span class="line">            fat = min(fat,lunch[i].second);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dinner.size();j++)&#123;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span>((lunch[i].first + dinner[j].first)&gt;=T)&#123;</span><br><span class="line">                fat = min(fat,lunch[i].second+dinner[j].second);</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//排序为了节省时间的，后边的都小，不满足条件，直接跳出就可以</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dinner.size();i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dinner[i].first &gt;= T) &#123;</span><br><span class="line">            fat = min(fat, dinner[i].second);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;fat&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>招聘</category>
      </categories>
      <tags>
        <tag>笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心算法</title>
    <url>/2020/ckep1k1bs000s7f9k3ed15wye/</url>
    <content><![CDATA[<h3 id="贪心算法VS动态规划"><a href="#贪心算法VS动态规划" class="headerlink" title="贪心算法VS动态规划"></a>贪心算法VS动态规划</h3><p>由于贪心和动态规划都利用了最优子结构性质，你可能会对一个可用贪心求解的问题设计一个动态规划算法，或者相反，对于一个实际上需要动态规划求解的问题使用了贪心算法。为了说明两种方法之间的细微差别，我们研究一个经典最优化问题的变形。</p>
<h5 id="0-1背包问题"><a href="#0-1背包问题" class="headerlink" title="0-1背包问题"></a>0-1背包问题</h5><p>一个正在抢劫商店的小偷发现了n个商品，第i个商品价值vi美元，重wi磅，vi和wi都是整数。这个小偷希望拿走价值尽量高的商品，但他的背包最多容纳W磅重的商品，W是一个整数。他应该拿哪些商品呢？（我们称这个问题是0-1背包问题，因为对每个商品，小偷要么把它完整拿走，要么把它留下；他不能只拿走一个商品的一部分。或者把一个商品拿走多次。）</p>
<h5 id="分数背包"><a href="#分数背包" class="headerlink" title="分数背包"></a>分数背包</h5><p>设定与0-1背包问题是一样的，但对每个商品，小偷可以拿走其一部分，而不是作出二元（0-1）选择。你可以将0-1背包想象为金锭，而分数背包问题中的商品更像金砂。</p>
<h5 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h5><p>两个问题都有最优子结构性质，对于0-1背包问题，考虑重量不超过W而价值最高的装包方案。如果我们将商品j从此方案中删除，则剩余商品必须是重量不超过W-wi的价值最高方案（小偷只能从不包括商品j的n-1个商品中选择拿走哪些）。虽然两个问题相似，但我们可以用贪心策略求解分数背包问题，而不能求解0-1背包问题。为了求解分数背包问题，我们首先计算每个商品的每磅价值vi/wi。遵循贪心策略，小偷尽可能地拿走每磅价值最高的商品。如果该商品已全部拿走而背包未装满，他继续选择拿走商品第二高的商品，依此类推，直到上限达到W。</p>
<h3 id="贪心算法原理"><a href="#贪心算法原理" class="headerlink" title="贪心算法原理"></a>贪心算法原理</h3><p>贪心算法通过做出一系列选择来求解问题的最优解。在每个决策点，它做出在当时看来最佳的选择。这种启发式策略并不保证总能找到最优解，但对于有些问题确实有效，如活动选择问题。设计贪心步骤算法：<br>    1.将最优化问题转化为这样的形式：对其做出一次选择后，只剩下一个问题需要求解。<br>    2.证明做出贪心选择后，原问题存在最优解，即贪心选择总是安全的。<br>    3.证明做出贪心选择后，剩余的子问题满足性质：其最优解与贪心选择组合即可得到原问题的最优解，这样就得到了最优子结构。</p>
<h3 id="贪心小技巧"><a href="#贪心小技巧" class="headerlink" title="贪心小技巧"></a>贪心小技巧</h3><p>1.通过对输入进行预处理或者使用适合的数据结构（通常是优先队列），我们通常可以使贪心选择更加快速，从而得到更高效的算法。<br>2.当应用贪心算法时，我们通常使用更为直接的最优子结构。如前所述，我们可以假定，通过对原问题应用贪心选择即可得到子问题。我们真正要做的全部工作就是论证：将子问题的最优解与贪心选择组合在一起就能生成原问题的最优解。这种方法隐含地对子问题使用了数学归纳法，证明了在每个步骤进行贪心选择会生成原问题的最优解。</p>
<h3 id="贪心例题及参考"><a href="#贪心例题及参考" class="headerlink" title="贪心例题及参考"></a>贪心例题及参考</h3><p>活动安排，哈夫曼编码，小船过河，找零问题，最小完成时间调度，无环子图<br>例题合集：<a href="https://www.cnblogs.com/hust-chen/p/8646009.html">https://www.cnblogs.com/hust-chen/p/8646009.html</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>贪心算法</tag>
      </tags>
  </entry>
  <entry>
    <title>网易互娱图形开发工程师sp</title>
    <url>/2020/ckep1k1bt000w7f9kb2lzchxk/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在面试之前，特地去网易互娱校招官网查看了图形开发工程师的职位描述和要求。</p>
<p>以下复制一下 职位要求<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">您可以：</span><br><span class="line">- 负责游戏产品的视觉效果，实现各种酷炫的效果，让所有平台和设备的玩家都有同样震撼的游戏体验；</span><br><span class="line">- 负责游戏产品的图形部分相关开发； </span><br><span class="line">- 与美术协作实现各种高级视觉效果，并优化content pipeline。</span><br><span class="line">任职资格</span><br><span class="line">我们希望您具备以下条件：</span><br><span class="line">- 计算机视觉或图形学等相关研究方向；</span><br><span class="line">- 有扎实的c++基础；</span><br><span class="line">- 有良好的图形学和数学基础；</span><br><span class="line">- 至少熟悉DirectX、OpenGL、Metal或者Vulkan中的一种图形API，并有很强的shader编写能力；</span><br><span class="line">- 熟悉AAA级游戏中常见的渲染技术，并对某一领域有深入理解，比如全局光照、粒子、材质表现、性能优化；</span><br><span class="line">- 有一定debug和性能分析能力。</span><br><span class="line"></span><br><span class="line">备注：广州需求80，杭州需求15，上海需求25。</span><br></pre></td></tr></table></figure></p>
<p>当看到熟悉AAA级游戏中的渲染技术，对某一领域有深入理解。内心就频频发虚。看了看杭州需求15人，基本也没有我的什么机会了。<br>但是，面试就是抱试试水的心态，一探虚实。</p>
<p>预约14：30面试，可能是面试官来不及安排，所以安排我们手撕了一道简单的算法题。</p>
<h3 id="试前代码"><a href="#试前代码" class="headerlink" title="试前代码"></a>试前代码</h3><p>题目：区间合并（leetcode 56题原题）<br>给出一个区间的集合，请合并所有重叠的区间。</p>
<p>示例 1:</p>
<p>输入: [[1,3],[2,6],[8,10],[15,18]]<br>输出: [[1,6],[8,10],[15,18]]<br>解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].<br>示例2:</p>
<p>输入: [[1,4],[4,5]]<br>输出: [[1,5]]<br>解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/merge-intervals">https://leetcode-cn.com/problems/merge-intervals</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h4 id="题解（自己花了15分钟写出来，这里复制官方题解，清晰明了方便日后学习）"><a href="#题解（自己花了15分钟写出来，这里复制官方题解，清晰明了方便日后学习）" class="headerlink" title="题解（自己花了15分钟写出来，这里复制官方题解，清晰明了方便日后学习）"></a>题解（自己花了15分钟写出来，这里复制官方题解，清晰明了方便日后学习）</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(intervals.begin(), intervals.end());</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; merged;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; intervals.size(); ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> L = intervals[i][<span class="number">0</span>], R = intervals[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (!merged.size() || merged.back()[<span class="number">1</span>] &lt; L) &#123;</span><br><span class="line">                merged.push_back(&#123;L, R&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                merged.back()[<span class="number">1</span>] = max(merged.back()[<span class="number">1</span>], R);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> merged;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">作者：LeetCode-Solution</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/merge-intervals/solution/he-bing-qu-jian-by-leetcode-solution/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>
<h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><p>刷完笔试题后，15分钟看着电脑屏幕里的自己，不敢玩手机，怕被误认为作弊，也不管浏览网页，就这样傻傻的看着自己。</p>
<p>15：00面试官来了。</p>
<p>相比较字节和华为的面试官，网易的这位面试官发量明显稀少了很多。</p>
<p>开篇：先做个简单的自我介绍，知识点考察主要分为c++和图形学相关知识</p>
<h4 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h4><ol>
<li>你知道程序由于异常退出，导致资源无法释放。这样的问题有什么解决方案么？（主要考察智能指针）</li>
<li>由智能指针出发询问你是否知道RAII？</li>
<li>考察了为什么要引入move</li>
<li>new和molloc的区别</li>
<li>vector和list遍历一遍谁比较快</li>
<li>map和unordered_map的区别和使用场景</li>
<li>你对多线程有了解么</li>
<li>虚函数的考察：构造函数调用虚函数 字节面试官也问了(<a href="https://blog.csdn.net/songchuwang1868/article/details/96481853">https://blog.csdn.net/songchuwang1868/article/details/96481853</a>)</li>
</ol>
<h4 id="图形学"><a href="#图形学" class="headerlink" title="图形学"></a>图形学</h4><ol>
<li>这个渲染管线的流程</li>
<li>顶点着色器完成了什么</li>
<li>光栅化完成了什么</li>
<li>混合和测试完成了什么</li>
<li>用于加速光线追踪的算法</li>
<li>阴影的算法</li>
<li>描述一个算法如何实现只将你看到的内容加载，没看到的内容就不加载</li>
</ol>
<h3 id="回马枪笔试"><a href="#回马枪笔试" class="headerlink" title="回马枪笔试"></a>回马枪笔试</h3><p>考察了一下纸牌排序random_shuffle, 查了一下这个是stl的内部函数<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">RandomAccessIterator</span>, <span class="title">class</span> <span class="title">RandomNumberGenerator</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">void</span> <span class="title">random_shuffle</span> (<span class="title">RandomAccessIterator</span> <span class="title">first</span>, <span class="title">RandomAccessIterator</span> <span class="title">last</span>,</span></span><br><span class="line"><span class="class">                       <span class="title">RandomNumberGenerator</span>&amp; <span class="title">gen</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  iterator_traits&lt;RandomAccessIterator&gt;::difference_type i, n;</span><br><span class="line">  n = (last-first);</span><br><span class="line">  <span class="keyword">for</span> (i=n<span class="number">-1</span>; i&gt;<span class="number">0</span>; --i) &#123;</span><br><span class="line">    swap (first[i],first[gen(i+<span class="number">1</span>)]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="反问面试官"><a href="#反问面试官" class="headerlink" title="反问面试官"></a>反问面试官</h3><ol>
<li>询问了RAII的意思</li>
<li>询问了图形开发工程师和引擎开发工程师， 图形可能会更偏向渲染这一块， 引擎更偏向物理引擎这一块。</li>
</ol>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>GAMES101更偏向讲rendering偏向图形开发， GAMES201更偏向讲物理引擎和数值计算偏向与引擎。但是GAMES201难度比GAMES101高多了，有时间还是得去复习一下GAMES101的内容如果想面试图形开发工程师的话，当然，多线程编程也需要去学习和弄个小项目自己玩玩。</p>
]]></content>
      <categories>
        <category>招聘</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/ckep1k1bu000y7f9k138u6aa4/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>实践记录</tag>
      </tags>
  </entry>
  <entry>
    <title>雷火引擎一面二面</title>
    <url>/2020/ckep1k1bv00127f9k3lvpgcxz/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>参加完OpenDay热血澎湃。早上网易mini游戏展，堪比ChinaJoy的模式，就是比较小型。但是整个游戏来说大部分可能还是Demon的形式，但是总体制作还是比较精良的。有一种参加学校社团展示的感觉，每个人都很热血。下午，动作捕捉中心和lua编写AI脚本。体验拉满。第二天刚好面试，还沉浸OpenDay的欢乐之中。</p>
<h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><p>手写了五道题目<br>主要考察虚函数，数学知识和算法</p>
<ol>
<li>10个数二分查找失败查找几次</li>
<li>入射方向L, 法线N，求反射R</li>
<li>哪些可以是虚函数</li>
<li>虚函数</li>
<li>左值右值</li>
<li>排序算法有哪些</li>
<li>归并排序怎么实现，主要思想</li>
</ol>
<h4 id="反问面试官"><a href="#反问面试官" class="headerlink" title="反问面试官"></a>反问面试官</h4><ol>
<li>询问了雷火的主要产品和收益情况？主要收益来自逆水寒和倩女幽魂</li>
<li>询问了unity和unreal的学习问题？unity容易上手，unreal上手相对会难一点。</li>
</ol>
<h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><p>是昨天mini项目的导师</p>
<ol>
<li>自我介绍</li>
<li>看到我也学了GAMES101，询问GAMES101学到了什么，和别的有什么不同</li>
<li>考察两个数学题 ，光线反射， 给定一个点和面求交点</li>
<li>询问项目，想查看项目的具体展示，项目的实际问题，解决方案</li>
<li>询问了笔试时小王打字那个题目</li>
<li>动态规划的基本思想</li>
<li>简单手写了前序遍历</li>
</ol>
<h4 id="反问面试官-1"><a href="#反问面试官-1" class="headerlink" title="反问面试官"></a>反问面试官</h4><ol>
<li>引擎的各种子系统会有哪些？推荐了《游戏引擎架构》，可以作为扫盲书。</li>
<li>举例了雷火主要使用unity，腾讯主要使用unreal,推荐去自己熟悉操作一下引擎，尝试跑一些例子。</li>
<li>好心建议就是离引擎的水平还是有一定差距，客户端还是可以继续三面，主要看你个人意愿。我现在做的就是我自己热爱的东西。所以。。。。公司相对会更愿意招一个能掌握最近资讯和技术的人，节约了培养成本。</li>
</ol>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>整体感觉都很好，面试交流也比较融洽，在面试的过程中还是能学到很多东西，如果学习路线该怎么走，履历该怎么增加等等，面试官无疑是最好的学习指导，以为他知道他想要什么，你就从他想要的东西里看看自己缺少什么。</p>
]]></content>
      <categories>
        <category>招聘</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>字节跳动秋招提前批c++客户端一面</title>
    <url>/2020/ckep1k1bw00147f9k8o8uhlj7/</url>
    <content><![CDATA[<h3 id="内心独白"><a href="#内心独白" class="headerlink" title="内心独白"></a>内心独白</h3><p>算是第一次正式的视频面试，还是很紧张……( ´▽｀)；</p>
<h3 id="过程总结"><a href="#过程总结" class="headerlink" title="过程总结"></a>过程总结</h3><ol>
<li>简短的自我介绍</li>
<li>询问项目相关</li>
<li>QML和QWeight比较，当初项目为什么选用这个</li>
<li>OpenGL版本</li>
<li>QT的信号与槽， 可以用什么代替</li>
<li>进程间通信方式，线程间通信方式</li>
<li>c++面向对象的三个特性具体解释一下</li>
<li>关于一段代码的虚函数调用后结果</li>
<li>关于虚函数表的问题</li>
</ol>
<h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><p>感觉对于图形学实际学习还存在欠缺，对于操作系统和C++语言深入了解不够细致，只是懂个大概，实际应用能力还有待增长。QT相关的应用也应该更加深入了解。查漏补缺吧。对于一面提及到的知识点回去好好温习巩固一下。只是提前批的第一波，不知道后面的公司有没有音讯，继续学习。期待能有二面吧，目前还是很想去字节上班的。</p>
]]></content>
      <categories>
        <category>招聘</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>华为软件开发工程师提前批二面</title>
    <url>/2020/ckep1k1bx00177f9k3ef5hhxm/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一个电话没接着，打不回去，就好怕改时间还是自己错过了。打校招电话回去咨询。还请教了一面的面试官。不过最后还是完美收尾了</p>
<h3 id="手写代码"><a href="#手写代码" class="headerlink" title="手写代码"></a>手写代码</h3><p>进来先考察代码能力，这次题目是leetcode316原题，因为没刷到过，而且本身对回溯的算法还不是很熟，所以没能在规定时间内，完成这道题目。<br>后面参考答案后写出的解题：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">removeDuplicateLetters</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; s.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.find(s[i]) != <span class="built_in">string</span>::npos) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">while</span>(!str.empty() &amp;&amp; str.back() &gt; s[i] &amp;&amp; s.find(str.back(), i)!=<span class="built_in">string</span>::npos)</span><br><span class="line">                str.pop_back();</span><br><span class="line">            str.push_back(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>贪心加栈，同时，当根据条件去掉一个栈顶元素时，新的栈顶元素可能也大于当前元素，所以应该继续判断新的栈顶元素和当前元素的关系，用一个while循环，直到出现一个不满足循环条件的栈顶元素（要么小于当前元素，要么大于当前元素但后续又无与之相同的元素来替代）。</p>
<h3 id="剩下进去问答环节"><a href="#剩下进去问答环节" class="headerlink" title="剩下进去问答环节"></a>剩下进去问答环节</h3><p>1.考察了设计模式<br>2.考察了面向对象的三个特点<br>3.考察了stl和红黑树<br>4.考察了C++虚函数<br>5.询问了项目相关<br>6.考察了模版类<br>7.考察了软件工程相关的整个流程<br>8.考察了类的六大特性<br>9.new和molloc的区别<br>10.构造函数和析构函数的调用过程<br>11.介绍一下继承的种类</p>
<h3 id="我询问面试官软件工程的知识在实际开发过程中真的会用到么"><a href="#我询问面试官软件工程的知识在实际开发过程中真的会用到么" class="headerlink" title="我询问面试官软件工程的知识在实际开发过程中真的会用到么"></a>我询问面试官软件工程的知识在实际开发过程中真的会用到么</h3><p>会用到很多，对于整个过程管理会很严格，文档和单元测试，集成测试等环节。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>感觉整个面试还是很不错，但是不知道会不会有三面，好想拿到offer！</p>
]]></content>
      <categories>
        <category>招聘</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>华为软件开发工程师提前批一面</title>
    <url>/2020/ckep1k1c0001a7f9k4ywp83qx/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>紧张激动，不知所措。面对一个大黑幕，但是看着自己就好像没有看着字节面试官那时候紧张了。</p>
<h3 id="手写代码"><a href="#手写代码" class="headerlink" title="手写代码"></a>手写代码</h3><p>进来先考察代码能力，这次题目是leetcode40原题，因为没刷到过，而且本身对回溯的算法还不是很熟，所以没能在规定时间内，完成这道题目。<br>后面参考答案后写出的解题：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  test_HW</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by 张嘉喜 on 2020/7/24.</span></span><br><span class="line"><span class="comment">//  Copyright © 2020 张嘉喜. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; candidates;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span>) &#123;</span><br><span class="line">            ans.push_back(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; candidates.size() &amp;&amp; target - candidates[i] &gt;= <span class="number">0</span> ; i++) &#123;</span><br><span class="line">            <span class="comment">//剪枝去重</span></span><br><span class="line">            <span class="comment">//这里i &gt; start 放在前面不然有些编译器会提示数组越界了</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            path.push_back(candidates[i]);</span><br><span class="line">            DFS(i + <span class="number">1</span>, target - candidates[i]);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            path.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">combinationSum2</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; candidates, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 排序后方便剪枝</span></span><br><span class="line">        sort(candidates.begin(), candidates.end());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>-&gt;candidates = candidates;</span><br><span class="line">        </span><br><span class="line">        DFS(<span class="number">0</span>, target);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; candidates ;</span><br><span class="line">    candidates.push_back(<span class="number">10</span>);</span><br><span class="line">    candidates.push_back(<span class="number">1</span>);</span><br><span class="line">    candidates.push_back(<span class="number">2</span>);</span><br><span class="line">    candidates.push_back(<span class="number">7</span>);</span><br><span class="line">    candidates.push_back(<span class="number">6</span>);</span><br><span class="line">    candidates.push_back(<span class="number">1</span>);</span><br><span class="line">    candidates.push_back(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    Solution s = Solution();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans = s.combinationSum2(candidates, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; ans.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; ans[i].size(); j++ ) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans[i][j] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>对于回溯和剪枝的题目还是作太少了。应该要加强练习。</p>
<h3 id="剩下进去问答环节"><a href="#剩下进去问答环节" class="headerlink" title="剩下进去问答环节"></a>剩下进去问答环节</h3><p>1.查看了我leetcode的刷题情况，询问我主要擅长什么类型的题目，能否独立完成困难题目。<br>2.询问了是否知道回溯。<br>3.考察了DFS和BFS，原理和实现，应用场景<br>4.考察了C++虚函数<br>5.能讲解一下类吗<br>6.询问了项目相关<br>7.询问是否对数据库底层原理了解<br>8.学习能力怎么样</p>
<h3 id="我询问面试官准备秋招还有哪些方面"><a href="#我询问面试官准备秋招还有哪些方面" class="headerlink" title="我询问面试官准备秋招还有哪些方面"></a>我询问面试官准备秋招还有哪些方面</h3><p>1.继续刷题，笔试500分会重点关注。要了解更多的算法思想，并查集，回溯，递归，递推，归并，贪心，动态规划，模拟，枚举<br>2.熟悉操作系统，因为杭研所主要还是做底层开发的，所以对整个CPU执行程序的过程，汇编等需要用到<br>3.如果有兴趣来做数据库的话，也要需要了解数据库相关的底层原理</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>和面试官整个沟通过程，感觉整个状态很好，所以也如愿以偿收到二面通知，明天就要二面了。加油～</p>
]]></content>
      <categories>
        <category>招聘</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>华为提前批综合面试</title>
    <url>/2020/ckep1k1c1001c7f9kd8a66khb/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>开始很紧张，面试前巨害怕。会不会和自己昨晚在网上搜索的内容一样有相似的经历。然后，又不得不请个假。面试前面试官不能录屏。然后又反复进入，留我一个人在视频里。这次面试没有像前两次一样一上来就手撕代码。（我前两次都没能撕出来）。主要的面试内容就是看着你的简历向你提问。</p>
<h3 id="面试要点"><a href="#面试要点" class="headerlink" title="面试要点"></a>面试要点</h3><ol>
<li>询问了本科和研究生的绩点</li>
<li>询问了本科和研究生的主要课程</li>
<li>询问课程在实际生活是否有应用，在哪里</li>
<li>询问了软件开发的完整流程</li>
<li>询问了个人的优缺点，分别在哪里体现</li>
<li>询问了为什么选择进入软件开发</li>
<li>周末喜欢做什么 </li>
<li>询问了个人对地域选择的意愿</li>
<li>询问了学长学姐的主要去向</li>
<li>询问了个人对薪资的期望</li>
</ol>
<h3 id="反问面试官"><a href="#反问面试官" class="headerlink" title="反问面试官"></a>反问面试官</h3><ol>
<li>你能给我介绍一下杭州的主要业务？华为的四大BG，软件研究院里面主要做研究的。杭州定位为计算研究所。华为开源的各种底层服务，open欧拉 open罗庚等等。</li>
<li>如果我进入计算产品线，需要具备哪些计算栈？主要强力推荐了《计算机体系结构》。</li>
</ol>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>隔天，查看官网的招聘进度，已经显示通过，并且询问了在职学长，说明已经进入池子了。等待被打捞，收获第一个offer。</p>
]]></content>
      <categories>
        <category>招聘</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>java的基本程序设计结构</title>
    <url>/2020/ckep1k1c3001g7f9k2w7sh1of/</url>
    <content><![CDATA[<h2 id="最简单的Java程序"><a href="#最简单的Java程序" class="headerlink" title="最简单的Java程序"></a>最简单的Java程序</h2><ul>
<li><p>java区分大小写</p>
</li>
<li><p>java应用程序的全部内容必须放置在类中</p>
</li>
<li><p>每个句子由分号结尾，回车不是句子的结尾</p>
</li>
</ul>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul>
<li><p>单行注释//</p>
</li>
<li><p>多行注释/<em>      </em>/</p>
</li>
<li><p>自动生成文档/<em>*     </em>/</p>
</li>
</ul>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h4><ul>
<li><p>int</p>
<ul>
<li>4字节</li>
</ul>
</li>
<li><p>short</p>
<ul>
<li>2字节</li>
</ul>
</li>
<li><p>long</p>
<ul>
<li>8字节</li>
</ul>
</li>
<li><p>byte</p>
<ul>
<li>1字节</li>
</ul>
</li>
</ul>
<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><ul>
<li><p>float</p>
<ul>
<li>4字节</li>
</ul>
</li>
<li><p>double</p>
<ul>
<li>8字节</li>
</ul>
</li>
</ul>
<h3 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h3><ul>
<li>常用字符采用单字节编码，，而另一些字符而需要两个或者更多个字节。在Java中采用UTF-16所以占用2字节</li>
</ul>
<h3 id="boolean（布尔）类型"><a href="#boolean（布尔）类型" class="headerlink" title="boolean（布尔）类型"></a>boolean（布尔）类型</h3><ul>
<li><p>1位</p>
<ul>
<li>只有0和1</li>
</ul>
</li>
<li><p>1字节</p>
<ul>
<li>1字节是计算机处理最小单位</li>
</ul>
</li>
<li><p>4字节</p>
<ul>
<li>java虚拟机规范里规定</li>
</ul>
</li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li><p>命名允许字符，数字和字母。字母包括’A’ ~ ‘Z’、 ‘a’ ~ ‘z’、’_’、’$’或者某种语言中表示字母的任何Unicode字符。数字包括’0’ ~ ‘9’和某种语言中表示数字的任何Unicode字符。</p>
</li>
<li><p>利用关键字final指示常量</p>
</li>
<li><p>声明一个变量后，必须用赋值语句对变量进行显式初始化，千万不要使用未初始化对变量</p>
</li>
</ul>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul>
<li><p>各运算符的优先级</p>
</li>
<li><p>各数据类型之间的强制类型转换</p>
</li>
</ul>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul>
<li><p>字符串的不可变属性</p>
</li>
<li><p>字符串类的一些常用接口</p>
</li>
</ul>
<h2 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h2><ul>
<li><p>读取输入</p>
</li>
<li><p>格式化输出</p>
</li>
<li><p>文件的输入与输出</p>
</li>
</ul>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><ul>
<li><p>if else</p>
</li>
<li><p>while</p>
</li>
<li><p>do while</p>
</li>
<li><p>for</p>
</li>
<li><p>break</p>
<p>提供了带标签选项</p>
</li>
<li><p>switch</p>
</li>
<li><p>continue</p>
<p>提供了带标签选项</p>
</li>
</ul>
<h2 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h2><ul>
<li><p>满足更高精度要求的计算</p>
</li>
<li><p>运算需要使用类内方法</p>
</li>
</ul>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul>
<li><p>for each</p>
</li>
<li><p>数据变量是一种引用</p>
</li>
<li><p>多维数组</p>
</li>
<li><p>不规则数组</p>
</li>
</ul>
<p><em>XMind: ZEN - Trial Version</em></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title>动态库与静态库的区别</title>
    <url>/2020/ckep1k1c4001j7f9k47224kil/</url>
    <content><![CDATA[<ul>
<li>区别：静态库和动态库最本质的区别就是：该库是否被编译进目标（程序）内部。</li>
</ul>
<h4 id="静态（函数）库"><a href="#静态（函数）库" class="headerlink" title="静态（函数）库"></a>静态（函数）库</h4><p>一般拓展名为（.a或者.lib),这类的函数库通常拓展名为libxxx.a或者xxx.lib。<br>这类库在编译的时候会直接整合到目标程序中，所以利用静态函数库编译程的文件会比较大，这类函数库最大的优点就是编译成功的可执行文件可以独立运行，而不再需要向外部要求读取函数库的内容；但是从升级难易度来看明显没有优势，如果函数库更新，需要重新编译。</p>
<h4 id="动态函数库"><a href="#动态函数库" class="headerlink" title="动态函数库"></a>动态函数库</h4><p>动态函数库的拓展名一般为 （.so或.dll)，这类函数库通常名为libxxx.so或xxx.dll。<br>与静态函数库被整个捕捉到程序中不同，动态函数库在编译的时候，在程序中只有一个“指向”的位置而已，也就是说当可执行文件需要使用到函数库的机制时，程序才会去读取函数库来使用；也就是说可执行文件无法单独运行。这样从产品功能升级角度方便升级，只要替换对应动态库即可，不必重新编译整个可执行文件。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>从产品化的角度，发布的算法库和功能库尽量使用动态库，这样方便更新和升级，不必重新编译整个可执行文件，只需新版本动态库替换掉旧动态库即可。</li>
<li>从函数库集成的角度，若要将发布的所有子库（不止一个）集成成一个动态库向外提供接口，那么就需要将所有子库编译为静态库，这样所有子库就可以全部编译进目标动态库中，由最终的一个集成库向外提供功能。</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title>我的博客诞生了</title>
    <url>/2020/ckep1k1c6001n7f9kd7vabf0n/</url>
    <content><![CDATA[<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul>
<li>macbook pro 2019 </li>
</ul>
<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>下载并安装</p>
<ul>
<li>git</li>
<li>node.js</li>
</ul>
<p><em>tips：如果下载速度过慢，可以找下国内镜像仓库</em><br><em>npm的国内镜像<a href="https://npm.taobao.org/mirrors/">https://npm.taobao.org/mirrors/</a></em><br><em>上面这个网址里也有git的资源</em></p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p><code>$ npm install -g hexo-cli</code></p>
<h3 id="github仓库建立"><a href="#github仓库建立" class="headerlink" title="github仓库建立"></a>github仓库建立</h3><p>仓库名必须满足：<br><code>&lt;用户名&gt;.github.io</code></p>
<h3 id="github-pages部署"><a href="#github-pages部署" class="headerlink" title="github pages部署"></a>github pages部署</h3><ol>
<li>安装hexo-deployer-git<br><code>npm install hexo-deployer-git</code></li>
<li>修改配置文件_config.yml<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delpoy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:github.com&#x2F;&lt;用户名&gt;&#x2F;&lt;用户名&gt;.github.io</span><br><span class="line">  branch:gh-pages</span><br></pre></td></tr></table></figure></li>
<li>运行<code>hexo clean &amp;&amp; hexo deploy</code></li>
<li>查看你的github网站是否更改</li>
</ol>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>实践记录</tag>
      </tags>
  </entry>
  <entry>
    <title>new与malloc的区别</title>
    <url>/2020/ckep1k1c7001r7f9k7vgla8nf/</url>
    <content><![CDATA[<h4 id="1-molloc与free是C-c语言的标准函数，-new-delete是c-的运算符。"><a href="#1-molloc与free是C-c语言的标准函数，-new-delete是c-的运算符。" class="headerlink" title="1. molloc与free是C++/c语言的标准函数， new/delete是c++的运算符。"></a>1. molloc与free是C++/c语言的标准函数， new/delete是c++的运算符。</h4><h4 id="2-他们都可以用于申请动态内存和释放内存。new-delete比molloc-free更加智能，其实底层也是执行的malloc-free。为啥说new-delete更加的智能？因为new和delete在对象创建的时候自动执行构造函数，对象消亡之前会自动执行析构函数。"><a href="#2-他们都可以用于申请动态内存和释放内存。new-delete比molloc-free更加智能，其实底层也是执行的malloc-free。为啥说new-delete更加的智能？因为new和delete在对象创建的时候自动执行构造函数，对象消亡之前会自动执行析构函数。" class="headerlink" title="2.他们都可以用于申请动态内存和释放内存。new/delete比molloc/free更加智能，其实底层也是执行的malloc/free。为啥说new/delete更加的智能？因为new和delete在对象创建的时候自动执行构造函数，对象消亡之前会自动执行析构函数。"></a>2.他们都可以用于申请动态内存和释放内存。new/delete比molloc/free更加智能，其实底层也是执行的malloc/free。为啥说new/delete更加的智能？因为new和delete在对象创建的时候自动执行构造函数，对象消亡之前会自动执行析构函数。</h4><h5 id="既然new-delete的功能完全覆盖了malloc和free，-为什么c-中不把malloc-free淘汰出局呢？"><a href="#既然new-delete的功能完全覆盖了malloc和free，-为什么c-中不把malloc-free淘汰出局呢？" class="headerlink" title="既然new/delete的功能完全覆盖了malloc和free， 为什么c++中不把malloc/free淘汰出局呢？"></a>既然new/delete的功能完全覆盖了malloc和free， 为什么c++中不把malloc/free淘汰出局呢？</h5><h5 id="因为c-程序经常要调用c语言，而c语言只能用malloc-free管理动态内存。"><a href="#因为c-程序经常要调用c语言，而c语言只能用malloc-free管理动态内存。" class="headerlink" title="因为c++程序经常要调用c语言，而c语言只能用malloc/free管理动态内存。"></a>因为c++程序经常要调用c语言，而c语言只能用malloc/free管理动态内存。</h5><h4 id="3-new返回指定类型的指针，并且可以自动计算出所需要的大小。malloc必须用户指定大小，并且默认返回类型为void-，-必须强制转换为实际类型的指针。"><a href="#3-new返回指定类型的指针，并且可以自动计算出所需要的大小。malloc必须用户指定大小，并且默认返回类型为void-，-必须强制转换为实际类型的指针。" class="headerlink" title="3. new返回指定类型的指针，并且可以自动计算出所需要的大小。malloc必须用户指定大小，并且默认返回类型为void*， 必须强制转换为实际类型的指针。"></a>3. new返回指定类型的指针，并且可以自动计算出所需要的大小。malloc必须用户指定大小，并且默认返回类型为void*， 必须强制转换为实际类型的指针。</h4>]]></content>
  </entry>
  <entry>
    <title>点和矢量</title>
    <url>/2020/ckep1k1c8001v7f9kfl6cd8q4/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>大部分现代3D游戏都是由虚拟世界里的三位物体组成的。游戏引擎的位置（position)、定向(orientation)和比例(scale)，不断改变这些属性以产生动画，并把这些属性变换(transform)至屏幕空间,使物体能被渲染到屏幕上。在游戏中，三维物体几乎都是由三角形组成的，其中三角形的顶点（vertex）则以点(point)表示。所以学习怎样表示游戏的整个对象之前，我们先来了解一下点，以及与之关系密切的矢量。</p>
<h4 id="1-点与笛卡儿坐标"><a href="#1-点与笛卡儿坐标" class="headerlink" title="1 点与笛卡儿坐标"></a>1 点与笛卡儿坐标</h4><p>严格地说，点是n维空间的一个位置(在游戏中，n通常等于2或3)。笛卡儿坐标系（Cartesian coordinate system) 是游戏程序员最常用的坐标系，它使用2个或3个相互垂直的轴来描述二维或三维空间的位置。因此，可以由2个或3个实数表示一个点P，即$（P_x，P_y）$或$（P_x，P_y， P_z）$。</p>
<p>除了笛卡儿坐标系之外，还有圆柱坐标系(cylindrical coordinate system),球坐标系（spherical coordinate system)。Crack the Weasal中就为了使得类似漩涡的效果更好实现就是用了圆柱坐标系。</p>
<h4 id="2-左手坐标系和右手坐标系的比较"><a href="#2-左手坐标系和右手坐标系的比较" class="headerlink" title="2 左手坐标系和右手坐标系的比较"></a>2 左手坐标系和右手坐标系的比较</h4><p>在三维笛卡儿坐标中，要安排3个相互垂直的轴，我们有两种选择，右手（right-handed RH)和左手(left_handed LH)。要掌握右手坐标系3个轴的方向，可把右手握拳，伸出拇指指向x轴，食指指向y轴，中指指向z轴。左手系则使用左手。<br>左手坐标与右手坐标的区别在于3个轴其中一个轴的方向不同。左手和右手坐标系相互转换十分容易。只需把其中一个轴反转，并保留另外两个轴不变即可。非常重要的是，数学法则在左手和右手坐标系里并不会改变，改变的只是我们如何把这些数学在脑海里诠释为三维空间。</p>
<h4 id="3-矢量"><a href="#3-矢量" class="headerlink" title="3 矢量"></a>3 矢量</h4><p>矢量(vector)是指n维空间中包含模（magnitude）和方向的量，矢量可绘制成有向线段，线段自一点（尾）延伸至另一点（头）。矢量和标量(scalar)（即普通的实数数值）比较，标量有模但没有方向。</p>
<p>三维矢量可以用3个标量(x,y,z)表示，如同点一样。点和矢量的区别实际上是很细微的。严格地说，矢量是相对于某已知点的偏移。一个矢量可移至三维空间中的任何位置，只要该矢量的方向和大小保持不变，无论在哪个位置，皆为同一个矢量。</p>
<p>矢量也可以用来表示点，只要把其尾固定在坐标系的原点（origin)。这些矢量有时候被称为位置矢量（position vector）或矢径（radius vector）。对我们来说，可以把3个标量视为点或矢量，只要记住，位置矢量的尾固定于已选坐标系的原点便可。这意味着，数学上点和矢量在使用时有微妙区别。或者说，点时绝对的，而矢量是相对的。</p>
<h4 id="4-矢量运算"><a href="#4-矢量运算" class="headerlink" title="4 矢量运算"></a>4 矢量运算</h4><h5 id="4-1-矢量和标量的乘法"><a href="#4-1-矢量和标量的乘法" class="headerlink" title="4.1 矢量和标量的乘法"></a>4.1 矢量和标量的乘法</h5><p>矢量<strong>a</strong>和标量s相乘，等于<strong>a</strong>的每个分量和s相乘：</p>
<script type="math/tex; mode=display">sa = \begin{bmatrix}sa_x&sa_y&sa_z \end{bmatrix}</script><h5 id="4-2-矢量加减法"><a href="#4-2-矢量加减法" class="headerlink" title="4.2 矢量加减法"></a>4.2 矢量加减法</h5><script type="math/tex; mode=display">a+b=\begin{bmatrix}(a_x+b_x)&(a_y+b_y)&(a_z+b_z) \end{bmatrix}</script><script type="math/tex; mode=display">a-b=\begin{bmatrix}(a_x-b_x)&(a_y-b_y)&(a_z-b_z) \end{bmatrix}</script><h5 id="4-3-矢量模"><a href="#4-3-矢量模" class="headerlink" title="4.3 矢量模"></a>4.3 矢量模</h5><script type="math/tex; mode=display">|a| = \sqrt{a_x^2 + a_y^2 + a_z^2}</script><h5 id="4-4-矢量运算的简单应用"><a href="#4-4-矢量运算的简单应用" class="headerlink" title="4.4 矢量运算的简单应用"></a>4.4 矢量运算的简单应用</h5><p>矢量加法，应用于角色或物体移动，初始位置加偏移量得到现在位置。显示欧拉法求解弹簧质点系统就是使用这个。<br>矢量减法，判断两球体是否相交，两球心的位置矢量相减得到的矢量的模与两球半径之和进行比较。<br>tips:开方的操作比较费时，模的平方有时候十分有效。</p>
<h5 id="4-5-归一化和单位矢量"><a href="#4-5-归一化和单位矢量" class="headerlink" title="4.5 归一化和单位矢量"></a>4.5 归一化和单位矢量</h5><p>单位矢量(unit vector)是模（长度）为1的矢量。</p>
<p>给定任意矢量$v$的长度$v=|v|$,可以把该矢量转换为单位矢量$u$，使其保持$v$的方向不变，长度为单位长度。用$v$乘以其模的倒数（reciprocal）。此过程叫做归一化(normalization)。</p>
<h5 id="4-6-法矢量"><a href="#4-6-法矢量" class="headerlink" title="4.6 法矢量"></a>4.6 法矢量</h5><p>某表面（surface)的法矢量（normal vector)是指某矢量垂直于该表面。法矢量在游戏和计算机图形学中非常有用。例如，一个平面(plane)可用一个点和一个法矢量来定义。在三维图形中，经常大量使用法矢量计算光线和材质表面之间的夹角。</p>
<h5 id="4-7-点积和投影"><a href="#4-7-点积和投影" class="headerlink" title="4.7 点积和投影"></a>4.7 点积和投影</h5><p>矢量间可以相乘，但和标量不同，矢量有多种乘法。在游戏编程中，最常用的有两种：</p>
<ul>
<li>点积(dot product)， 又称为标量积(scalar product)或内积(inner product)。</li>
<li>叉积(cross product),又称为矢量积(vector product)或外积(outer product).</li>
</ul>
<p>两个矢量的点积结果是一个标量，此标量定义为两个矢量中每对分量乘积之和：</p>
<script type="math/tex; mode=display">a·b = a_xb_x + a_yb_y + a_zb_z = d(一个标量)</script><p>点积也可以写成两个矢量的模相乘后，在乘以两个矢量间夹角的余弦值：</p>
<script type="math/tex; mode=display">a·b =|a||b|cos\theta</script><p>点积可进行交换律(communitative)运算，以及在加法上也可进行分配律(distributive)运算，也可结合标量乘法。</p>
<p>点积的主要用法：<br>1.矢量投影，任意向量$a$与单位向量$u$点乘，得到向量$a$在$u$上的投影<br>2.点积求模，两个相同向量点积，得到模的平方<br>3.点积判定，用来判断两矢量是否共线，是否同向，是否反向，是否垂直。<br>4.在游戏里，或用点积来判断敌人是否在你的前面，敌人位置减玩家位置与玩家的前向方向相乘</p>
<h5 id="4-7-叉积"><a href="#4-7-叉积" class="headerlink" title="4.7 叉积"></a>4.7 叉积</h5><p>向量积，数学中又称外积、叉积，物理中称矢积、叉乘，是一种在向量空间中向量的二元运算。与点积不同，它的运算结果是一个向量而不是一个标量。并且两个向量的叉积与这两个向量和垂直。其应用也十分广泛，通常应用于物理学光学和计算机图形学中。</p>
<p>模长：（在这里$\theta$表示两向量之间的夹角（共起点的前提下）$（0°≤\theta≤180°）$，它位于这两个矢量所定义的平面上。）<br>方向：a向量与b向量的向量积的方向与这两个向量所在平面垂直，且遵守右手定则。（一个简单的确定满足“右手定则”的结果向量的方向的方法是这样的：若坐标系是满足右手定则的，当右手的四指从a以不超过180度的转角转向b时，竖起的大拇指指向是c的方向。）也可以这样定义（等效）：<br>向量积$|c|=|a \times b|=|a||b|sin\theta$<br>即c的长度在数值上等于以a，b，夹角为θ组成的平行四边形的面积。<br>而c的方向垂直于a与b所决定的平面，c的指向按右手定则从a转向b来确定。<br>*运算结果c是一个伪向量。这是因为在不同的坐标系中c可能不同</p>
<p>叉积的主要用法：<br>1.求解平面法矢量，用平面内三点构成两个不平行的矢量，叉积得到法矢量。<br>2.在物理模拟中要来求解力矩<br>3.求解三角形面积<br>4.判断点是否在三角形内<br>5.判断两个矢量的左右关系和是否共线</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GAMES101 判断点是否在三角形内</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">insideTriangle</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">const</span> Vector3f* _v)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="comment">// TODO : Implement this function to check if the point (x, y) is inside the triangle represented by _v[0], _v[1], _v[2]</span></span><br><span class="line">    <span class="function">Eigen::Vector2f <span class="title">v1</span><span class="params">(_v[<span class="number">0</span>].x(),_v[<span class="number">0</span>].y())</span></span>;</span><br><span class="line">    <span class="function">Eigen::Vector2f <span class="title">v2</span><span class="params">( _v[<span class="number">1</span>].x(),_v[<span class="number">1</span>].y())</span></span>;</span><br><span class="line">    <span class="function">Eigen::Vector2f <span class="title">v3</span><span class="params">(_v[<span class="number">2</span>].x(),_v[<span class="number">2</span>].y())</span></span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> s  = (v2.x() - v1.x()) * (v3.y() - v1.y()) - (v2.y() - v1.y()) * (v3.x() - v1.x());</span><br><span class="line">    <span class="keyword">float</span> s1 = (v2.x() - v1.x()) * (y    - v1.y()) - (v2.y() - v1.y()) * (x - v1.x());</span><br><span class="line">    <span class="keyword">float</span> s2 = (v1.x() - v3.x()) * (y    - v3.y()) - (v1.y() - v3.y()) * (x - v3.x());</span><br><span class="line">    <span class="keyword">float</span> s3 = (v3.x() - v2.x()) * (y    - v3.y()) - (v3.y() - v2.y()) * (x - v3.x());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ((s*s1) &gt; <span class="number">0</span>&amp;&amp;(s*s2)&gt;<span class="number">0</span>&amp;&amp;(s*s3)&gt;<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-点和矢量的线性插值"><a href="#5-点和矢量的线性插值" class="headerlink" title="5 点和矢量的线性插值"></a>5 点和矢量的线性插值</h4><p>游戏中，时常要找出两个已知矢量之间的矢量。例如，要在两秒内，以每秒30帧的速度，用动画形式顺滑地把物体从$A$点移动到$B$点，那么须计算A和B之间60个中间点（intermediate point）。</p>
<p>线性插值（liear interpolation) 是一个简单的数学运算，用来计算两个已知点点中间点。此运算的名称通常简写成LERP。此运算定义如下，其中$\beta $介于并包含0～1:</p>
<script type="math/tex; mode=display">L=LERP(A,B,\beta) = (1-\beta)A+\beta B</script><p>从几何上看，$L=LERP(A,B,\beta)$为AB线段间一点的位置矢量，该点距A点b百分比的位置。数学上，LERP函数只是两矢量的加权平均（weighted average)。</p>
]]></content>
      <categories>
        <category>计算机图形学</category>
      </categories>
      <tags>
        <tag>数学基础</tag>
      </tags>
  </entry>
  <entry>
    <title>进程和线程</title>
    <url>/2020/ckep1k1c9001y7f9kdxqf3q5k/</url>
    <content><![CDATA[<h3 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h3><ul>
<li>进程是正在运行的一个应用程序，程序一旦运行就是进程。</li>
<li>进程是系统进行资源分配的最小单位，每个进程拥有独立的地址空间。</li>
<li>一个进程无法直接去访问另外一个进程的变量和数据结构，需要进行进程间通信，包括管程，消息队列。</li>
<li>线程是进程的一个实体，是资源调度的基本单位。</li>
</ul>
<h3 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h3><ul>
<li>同一进程的线程共享进程的地址空间，而进程之间则是独立的地址空间</li>
<li>同一进程内的线程共享本进程的资源，但是进程之间的资源是独立的</li>
<li>一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃后，整个进程崩溃</li>
<li>进程切换，消耗资源大，线程切换时间少于进程</li>
<li>二者均可以并发执行</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title>虚函数</title>
    <url>/2020/ckep1k1cb00237f9k19q488lv/</url>
    <content><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在c++中，基类必须指出派生类重定义哪些函数，定义为virtual的函数是基类期待派生类重新定义的，基类希望派生类继承的函数不能定义为虚函数。（c++ primer）</p>
<h3 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h3><p>在C++中，通过基类的引用（或指针）调用虚函数时，发生动态绑定。引用（或指针）即可以指向基类对象也可以指向派生类对象，这一事实是动态绑定的关键。用引用（或指针）调用虚函数在<u><strong>运行</strong></u>时确定，被调用的函数是引用（或指针）所指对象的实际类型所定义的。</p>
<p>保留字virtual的目的是启用动态绑定。成员默认是非虚函数，对非虚函数的调用在<u><strong>编译</strong></u>时确定。为了指明函数为虚函数，在其返回类型类型前面加上保留字virtual。除了构造函数外，任何非static成员函数都可以是虚函数。保留字virtual只能在类内部的成员函数声明中出现，不能在类定义体外部出现的函数定义上。</p>
<h3 id="派生类与虚函数"><a href="#派生类与虚函数" class="headerlink" title="派生类与虚函数"></a>派生类与虚函数</h3><p>尽管不是必须这么做，派生类一般会重定义所继承的虚函数。如果派生类没有重定义某个虚函数，则使用基类中定义的版本。派生类必须对想要重定义的每个继承成员进行声明。派生类中虚函数的声明必须与基类中的定义方式完全匹配，但有一个例外：返回对基类型的引用（或指针）的虚函数。派生类中的虚函数可以返回基类函数所返回类型的派生类的引用（或指针）。</p>
<p>tips：一旦函数在基类中声明为虚函数，他就一直为虚函数，派生类无法改变该函数为虚函数这一事实。派生类重定义虚函数时，可以使用virtual保留字，但不是必须这么做。</p>
<h3 id="覆盖虚函数机制"><a href="#覆盖虚函数机制" class="headerlink" title="覆盖虚函数机制"></a>覆盖虚函数机制</h3><p>在某些情况下，希望覆盖虚函数机制并强制函数调用使用虚函数的特定版本，这时可以用作用域操作符：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Item_base *baseP &#x3D; &amp;derived;</span><br><span class="line">&#x2F;&#x2F; calls version from the base class regardless of the dynamic type of baseP</span><br><span class="line">double d &#x3D; baseP -&gt; Item_base::net_prise(42);</span><br></pre></td></tr></table></figure><br>这段代码强制将net_price调用确定为Item_base中定义的版本，该调用将在编译时确定。<br>为什么会希望覆盖虚函数机制？最常见的理由是为了派生类虚函数调用基类中的版本。在这种情况下，基类版本可以完成继承层次中所有类型的公共任务，而每个派生类型只添加自己的特殊工作。</p>
<p>tips：派生类虚函数调用基类版本时，必须显式使用作用域操作符。如果派生类忽略这样做，则函数调用会在运行时确定并且将是一个自身调用，从而导致无穷递归。</p>
<h3 id="虚函数与默认实参"><a href="#虚函数与默认实参" class="headerlink" title="虚函数与默认实参"></a>虚函数与默认实参</h3><p>像其他任何函数一样，虚函数也可以有默认实参值，该值将在编译时确定。如果一个调用省略了具有默认值的实参，则所用的值由调用该函数类型定义，与对象的动态类型无关。通过基类的引用或指针调用虚函数时，默认实参为在基类虚函数声明中指定的值，如果通过派生类的指针或引用调用虚函数，则默认实参是在派生类版本中声明的值。</p>
<p>在同一虚函数的基类版本和派生类版本中使用不同的默认实参几乎一定会引起麻烦。如果通过基类的引用或指针调用虚函数，但实际执行的是派生类中定义的版本，这时就可能会出现问题。在这种情况下，为虚函数的基类版本定义的默认实参将传给派生类定义的版本，而派生类版本是用不同的默认实参定义的。</p>
<h3 id="c-的多态性"><a href="#c-的多态性" class="headerlink" title="c++的多态性"></a>c++的多态性</h3><p>引用和指针的静态类型和动态类型可以不同，这是C++用以支持多态性的基石。</p>
<p>通过基类引用或指针调用基类中定义的函数时，我们并不知道执行函数的对象的确切类型，执行函数的对象可能是基类类型的，也可能是派生类型的。</p>
<p>如果调用非虚函数，则无论实际对象是什么类型，都执行基类类型所定义的函数。如果调用虚函数，则直到运行时才能确定调用哪个函数，运行的虚函数是引用所绑定的或指针所指向的对象所属类型定义的版本。</p>
<h3 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h3><p>自动调用基类部分的析构函数对基类的设计有重要影响。</p>
<p>删除指向动态分配对象的指针时，需要运行析构函数在释放对象的内存之前清理对象。处理继承层次中的对象时，指针的静态类型可能与删除对象的动态类型不同，可能会删除实际指向派生类对象的基类类型指针。</p>
<p>如果删除基类指针，则需要运行基类析构函数并清除基类的成员，如果对象实际时派生类型的，则没有定义该行为。要保证运行适当的析构函数，基类中的析构函数必须为虚函数：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Item_base &#123;</span><br><span class="line">public:</span><br><span class="line">    &#x2F;&#x2F; no work,but virtual destructor needed</span><br><span class="line">    &#x2F;&#x2F; if base pointer that points to a derived object is ever deleted</span><br><span class="line">    virtual ~Item_base() &#123; &#125;</span><br></pre></td></tr></table></figure><br>如果析构函数为虚函数，那么通过指针调用时，运行哪个析构函数将因指针所指对象类型的不同而不同：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Item_base *itemP &#x3D; new Item_base; &#x2F;&#x2F; same static and dymatic type </span><br><span class="line">delete item; &#x2F;&#x2F; ok:destructor for Item_base called</span><br><span class="line">itemP &#x3D; new Bulk_item; &#x2F;&#x2F; ok:static and dynamic types differ</span><br><span class="line">delete itemP; &#x2F;&#x2F; ok:destructor for Bulk_item called</span><br></pre></td></tr></table></figure><br>像其他虚函数一样，析构函数的性质都将继承。因此，如果层次中根类的析构函数也虚函数，则派生类析构函数也将是虚函数，无论派生类显式定义析构函数还是使用合成析构函数，派生类析构函数都是虚函数。</p>
<p>基类虚构函数式三法则的一个重要例外。三法则指出，如果类需要析构函数，则类几乎也确实需要其他复制控制成员，基类几乎总是需要析构函数，从而可以将析构函数设定为虚函数。如果基类为了将析构函数设为虚函数而具有空析构函数，那么，类具有析构函数并不表示需要赋值操作符或复制构造函数。</p>
<p>tips：即使析构函数没有工作要做，继承层次的根类也应该定义一个虚析构函数。</p>
<h4 id="构造函数和复制操作符不是虚函数"><a href="#构造函数和复制操作符不是虚函数" class="headerlink" title="构造函数和复制操作符不是虚函数"></a>构造函数和复制操作符不是虚函数</h4><p>在复制控制成员中， 只有析构函数应定义为虚函数，构造函数不能定义为虚函数。构造函数是对对象完全构造之前运行的，在构造函数运行的时候，对象的动态类型还不完整。</p>
<p>虽然可以在基类中将对象成员函数 operator=定义为虚函数，但这样做并不影响派生类中使用的复制操作符。每个类有自己的赋值操作符，派生类中的赋值操作符有一个与类本身类型相同的形参，该类型必须不同于继承层次中任何其他类的赋值操作符的形参类型。</p>
<p>将赋值操作符设为虚函数可能会令人混淆，因为虚函数必须在基类和派生类中具有相同的形参。基类赋值操作符有一个形参是自身类类型的引用，如果该操作符为虚函数，则每个类型都将得到一个虚函数成员，该成员定义了参数为一个基类对象的operator=。但是，对派生类而言，这个操作符与赋值操作符是不同的。</p>
<p>tips：将类的赋值操作符定义为虚函数很可能令人混淆，而且没什么用处。</p>
<h3 id="构造函数和析构函数中的虚函数"><a href="#构造函数和析构函数中的虚函数" class="headerlink" title="构造函数和析构函数中的虚函数"></a>构造函数和析构函数中的虚函数</h3><p>构造派生类对象时首先运行基类构造函数初始化对象的基类部分。在执行基类构造函数时，对象的派生类部分是未初始化的。实际上，此时对象还不是一个派生类对象。</p>
<p>撤销派生类对象时，首先撤销它的派生类部分，然后按照与构造顺序的逆序撤销它的基类部分。</p>
<p>在这两种情况下，运行构造函数或析构函数的时候，对象都是不完整的。为了适应这种不完整，编译器将对象的类型视为在构造或析构期间发生了变化。在基类构造函数或析构函数中，将派生类对象作为基类类型对象对待。</p>
<p>构造或析构期间的对象类型对虚函数的绑定有影响。</p>
<p>tips：如果在构造函数或析构函数中调用虚函数，则运行的是为构造函数或析构函数自身类型定义的版本。</p>
<p>无论由构造函数（或析构函数）直接调用虚函数，或者从构造函数（或虚构函数）所调用的函数间接调用虚函数，都应用这种绑定。</p>
<p>要理解这种行为，考虑如果从基类构造函数（或析构函数）调用虚函数的派生类版本会怎样。虚函数的派生类版本很可能会访问派生类对象的成员，毕竟，如果派生类版本不需要使用派生类对象的成员，派生类多半能够使用基类中的定义。但是，对象的派生部分的成员不会在基类构造函数运行期间初始化，实际上，如果允许这样的访问，程序很可能会崩溃。 </p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
      </tags>
  </entry>
</search>
