<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>进程间通信</title>
    <url>/2020/ckcm2x6gp00006c9kbnzsb17o/</url>
    <content><![CDATA[<h3 id="进程协作的目的"><a href="#进程协作的目的" class="headerlink" title="进程协作的目的"></a>进程协作的目的</h3><ul>
<li><strong>信息共享</strong>： 由于多用户可能对同样的信息感兴趣（例如共享文件），所以应提供环境以允许并发访问这些信息。</li>
<li><strong>计算加速</strong>： 如果希望一个特定快速运行，那么应将系统功能划分成子任务，而每个子任务可以与其他子任务一起并行执行。注意，如果要实现这样的加速，那么计算机需要有多个处理核。</li>
<li><strong>模块化</strong>： 可以需要按模块化方式构造系统，如第2章所讨论的，可将系统功能划分成独立的进程和线程。</li>
<li><strong>方便</strong>： 即使单个用户也可以同时执行许多任务。例如，用户可以并行的编辑、收听音乐、编译。</li>
</ul>
<h5 id="协作进程需要进程间通信（IPC"><a href="#协作进程需要进程间通信（IPC" class="headerlink" title="协作进程需要进程间通信（IPC)"></a>协作进程需要进程间通信（IPC)</h5><h3 id="进程间通信的两种基本模型：共享内存和消息传递"><a href="#进程间通信的两种基本模型：共享内存和消息传递" class="headerlink" title="进程间通信的两种基本模型：共享内存和消息传递"></a>进程间通信的两种基本模型：共享内存和消息传递</h3><h4 id="共享内存系统"><a href="#共享内存系统" class="headerlink" title="共享内存系统"></a>共享内存系统</h4><p>采用共享内存的进程间通信，需要通信进程建立共享内存区域。通常，一片共享内存区域驻留在创建共享内存段的进程空间内。其他希望使用这个共享内存段进行通信段进行通信的进程应将其附加到自己的地址空间。</p>
<p>生产者进程生成信息，以供消费者进程消费。为了允许生存者进程和消费者进程并发执行，应有一个可用的缓冲区，以被生存者填充和被消费者清空。这个缓冲区驻留在生产者进程和消费者进程的共享内存区域内。当消费者使用一项时，生产者可生产另一项。生产者和消费者必须同步，这样消费者不会试图消费一个尚未生产出来的项。</p>
<p>缓冲区域类型可分为两种。<br><strong>无界缓冲区</strong>没有限制缓冲区的大小。消费者可能不得不等待新的项，但生产者总是可以产生新项。<br><strong>有界缓冲区</strong>假设固定大小的缓冲区。对于这种情况，如果缓冲区空，那么消费者必须等待；并且如果缓冲区满，那么生产者必须等待。</p>
<h6 id="采用共享内存的生产者进程如下："><a href="#采用共享内存的生产者进程如下：" class="headerlink" title="采用共享内存的生产者进程如下："></a>采用共享内存的生产者进程如下：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(true) &#123;</span><br><span class="line">    &#x2F;* produce an item in next_produced *&#x2F;</span><br><span class="line">    </span><br><span class="line">    while(((in + 1) % BUFFER_SIZE) &#x3D;&#x3D; out)</span><br><span class="line">        ; &#x2F;* do nothing *&#x2F;</span><br><span class="line">    </span><br><span class="line">    buffer[in] &#x3D; next_produced;</span><br><span class="line">    in &#x3D; (in + 1) % BUFFER_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="采用共享内存的消费者进程如下："><a href="#采用共享内存的消费者进程如下：" class="headerlink" title="采用共享内存的消费者进程如下："></a>采用共享内存的消费者进程如下：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(true) &#123;</span><br><span class="line">    while(in &#x3D;&#x3D; out)</span><br><span class="line">        ;&#x2F;* do nothing *&#x2F;</span><br><span class="line">    next_consumed &#x3D; buffer[out];</span><br><span class="line">    out &#x3D; (out + 1) % BUFFER_SIZE;</span><br><span class="line">    </span><br><span class="line">    &#x2F;* consume the item in next_consumed *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="消息传递系统"><a href="#消息传递系统" class="headerlink" title="消息传递系统"></a>消息传递系统</h4><p>对于分布式环境（通信进程可能位于通过网络连接的不同计算机），消息传递特别有用。<br>消息传递工具提供至少两种操作：</p>
<ul>
<li>send(message)     </li>
<li>recevie(message)</li>
</ul>
<p>进程发送消息可以是定长的或变长的。如果只能发生定长消息，那么系统级实现就简单。不过，这一限制使得编程任务更加困难。相反，变长消息要求更复杂的系统级实现，但是编程任务就变得更简单。在整个操作系统设计中，这种折中很常见。</p>
<p>如果进程P和Q需要通信，那么它们必须相互发送消息和接受消息：它们之间要有<strong>通信链路</strong>。该链路的实现有多种方法。这里不关心链路的物理实现，而只关心链路的逻辑实现。这里有几个方法，用于实现链路和操作send()/receive():</p>
<ul>
<li>直接或间接的通信</li>
<li>同步或异步的通信</li>
<li>自动或显式的缓冲</li>
</ul>
<h4 id="1-命名"><a href="#1-命名" class="headerlink" title="1. 命名"></a>1. 命名</h4><p>需要通信的进程应有一个方法，以便相互引用。它们可以直接或间接的通信。<br>对于<strong>直接通信</strong>，需要通信的每个进程必须指明指定通信的接收者或发送者。采用这种方案，原语send()和receive()定义如下：</p>
<ul>
<li>send(P, message): 向进程P发送message。</li>
<li>receive(Q, message)： 从进程Q接收message。</li>
</ul>
<p>这种方案的通信链路具有以下属性：</p>
<ul>
<li>在需要通信的每对进程之间，自动建立链路。进程仅需知道对方身份就可交流。</li>
<li>每个链路只与两个进程相关。</li>
<li>每个进程只有一个链路。</li>
</ul>
<p>这种方案展示了寻址的对称性，即发送和接收进程必须指定对方，以便通信。这种方案的一个变形采用寻址的非对称性，即只要发送者指定接收者，而接受者不需要指定发送者。采用这种方案，原语send()和receive()的定义如下：</p>
<ul>
<li>send(P, message): 向进程P发送message。</li>
<li>receive(id, message): 从任何进程，接收message，这里变量id被设置成与其通信进程的名称。</li>
</ul>
<p>这两个方案（对称和非对称的寻址）的缺点是：生成进程定义的有限模块化。更改进程的标志符可能需要分析其他进程定义。所有旧的标志符的引用都应找到，以便修改成为新标识符。通常，任何时候的硬编码技术（其中标志符需要明确指定），与下面所诉的采用间接技术相比要差。</p>
<p>在<strong>间接通信</strong>中，通过邮箱和端口来接收消息。邮箱可以抽象成一个对象，进程可以向其中存放消息，也可以从中删除消息，每个邮箱都有一个唯一的标识符。一个进程可以通过不同邮箱与另一个进程通信，但是两个进程只有拥有一个共享邮箱时才能通信。原语send()和receive()定义如下：</p>
<ul>
<li>send(A, message): 向邮箱A发送message。</li>
<li>receive(A, message): 从邮箱A接收messgae。</li>
</ul>
<p>对于这种方案，链路通信具有如下特点：</p>
<ul>
<li>只有两个进程共享一个邮箱时，才能建立通信链路。</li>
<li>一个链路可以与两个或更多进程相关联。</li>
<li>两个通信进程之间可有多个不同链路，每个链路对应于一个邮箱。</li>
</ul>
<h4 id="2-同步"><a href="#2-同步" class="headerlink" title="2. 同步"></a>2. 同步</h4><p>进程间通信可以通过调用原语send()和receive()来进行。实现这些原语有不同的设计方案。消息传递可以是阻塞或非阻塞，也称为同步或异步。</p>
<ul>
<li><strong>阻塞发送</strong>： 发送进程阻塞，直到消息由接收进程或邮箱所接收。</li>
<li><strong>非阻塞发送</strong>： 发送进程发送消息，并且恢复操作。</li>
<li><strong>阻塞接收</strong>： 接收进程阻塞，直到消息可用。</li>
<li><strong>非阻塞接收</strong>： 接收进程收到一个有效消息或者空消息。</li>
</ul>
<p>不同组合的send()和receive()都有可能。当send()和receive()都是阻塞的，则在发送者和接收者之间就有一个<strong>交互</strong>。当采用阻塞的send()和receive()时，生产者-消费者问题的解决就简单了。生产者仅需调用阻塞send()并且等待，直到消息被送到接收者或者邮箱。同样，当消费者调用reiceve()时，它会阻塞直到有一个消息可用。</p>
<h6 id="采用消息传递的生产者进程如下："><a href="#采用消息传递的生产者进程如下：" class="headerlink" title="采用消息传递的生产者进程如下："></a>采用消息传递的生产者进程如下：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">message next_produced</span><br><span class="line">while(true) &#123;</span><br><span class="line">    &#x2F;* produce an item in next_produced *&#x2F;</span><br><span class="line">    </span><br><span class="line">    send(next_produced);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="采用消息传递的消费者进程如下："><a href="#采用消息传递的消费者进程如下：" class="headerlink" title="采用消息传递的消费者进程如下："></a>采用消息传递的消费者进程如下：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">message next_comsumed</span><br><span class="line">while(true) &#123;</span><br><span class="line">    receive(next_consumed);</span><br><span class="line">    </span><br><span class="line">    &#x2F;* consume the item in next_consumed *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-缓存"><a href="#3-缓存" class="headerlink" title="3. 缓存"></a>3. 缓存</h4><p>不管通信时直接的还是间接的，通信进程交换的消息总是驻留在临时队列中。简单地讲，队列实现有三种方法：</p>
<ul>
<li><strong>零容量</strong>：队列的最大长度为0；因此，链路中不能有任何消息处于等待。对于这种情况，发送者应阻塞，直到接收者接收消息。</li>
<li><strong>有限容量</strong>： 队列长度为有限的n；因此，最多只能有n个消息驻留其中。如果在发送消失时队列未满，那么该消息可以放在队列中（或者复制消息或者保存消息的指针），且发生者可以继续执行而不必等待。然而，链路容量是有限。如果链路已满，那么发送者应阻塞，直到队列空间有有用的为止。</li>
<li><strong>无限容量</strong>： 队列长度可以无限，因此，不管多少消息都可以在其中等待。发送者从不阻塞。</li>
</ul>
<p>零容量情况称为无缓冲的消息系统，其他情况称为自动缓冲的消息系统。</p>
]]></content>
  </entry>
  <entry>
    <title>什么是死锁？在什么情况下产生？怎么解决？</title>
    <url>/2020/ckcm2x6gu00016c9khvu9d3qm/</url>
    <content><![CDATA[<p>在多道程序环境中，多个进程可以竞争有限数量的资源。当一个进程申请资源时，如果这时没有可用资源，那么这个进程进入等待状态。有时，如果所申请的资源被其他等待进程占有，那么等待进程有可能再也无法改变状态。这种情况称为死锁（deadlock）。</p>
<p>死锁的必要条件：如果在一个系统中以下四个条件同时成立，那么就能引起死锁：</p>
<ul>
<li><strong>互斥（ mutual exclusion）</strong>：至少一个资源必须处于非共享模式，即一次只有一个进程可使用。如果另一进程申请该资源，那么申请进程应等到该资源释放为止。</li>
<li><strong>占有并等待（ hold and wait ）</strong>：一个进程应占有至少一个资源，并等待另一个资源，该资源为其他进程所占有。</li>
<li><strong>非抢占（ no preemption ）</strong>：资源不能被抢占，即资源只能被进程完成任务后自愿释放。</li>
<li><strong>循环等待（ circular wait ）</strong>：有一组等待进程{P0,P1,···，Pn},P0等待的资源为P1占有，P1等待的资源为P2占有，·······，P（n-1）等待的资源为Pn占有，Pn等待的资源被P0占有。</li>
</ul>
<p>四个条件必须同时成立才会出现死锁。循环等待条件意味着占有并等待条件，这样四个条件并不完全独立。</p>
<p>一般来说，处理死锁问题有三种方法：</p>
<ul>
<li>通过协议来预防和避免死锁，确保系统不进入死锁状态。</li>
<li>可以允许系统进入死锁状态，然后检测它，并加以恢复。</li>
<li>可以忽视这个问题，认为死锁不可能在系统内发生。</li>
</ul>
<p>第三种解决为大多数操作系统所采用，包括Linux和windows。因此应用程序开发人员需要自己编写程序，以便处理死锁。</p>
<p>死锁预防 死锁避免 死锁检测 死锁恢复。</p>
]]></content>
  </entry>
  <entry>
    <title>字节跳动秋招提前批c++客户端一面</title>
    <url>/2020/ckcm2x6hm000a6c9kc4g7dlcs/</url>
    <content><![CDATA[<h3 id="内心独白"><a href="#内心独白" class="headerlink" title="内心独白"></a>内心独白</h3><p>算是第一次正式的视频面试，还是很紧张……( ´▽｀)；</p>
<h3 id="过程总结"><a href="#过程总结" class="headerlink" title="过程总结"></a>过程总结</h3><ol>
<li>简短的自我介绍</li>
<li>询问项目相关</li>
<li>QML和QWeight比较，当初项目为什么选用这个</li>
<li>OpenGL版本</li>
<li>QT的信号与槽， 可以用什么代替</li>
<li>进程间通信方式，线程间通信方式</li>
<li>c++面向对象的三个特性具体解释一下</li>
<li>关于一段代码的虚函数调用后结果</li>
<li>关于虚函数表的问题</li>
</ol>
<h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><p>感觉对于图形学实际学习还存在欠缺，对于操作系统和C++语言深入了解不够细致，只是懂个大概，实际应用能力还有待增长。QT相关的应用也应该更加深入了解。查漏补缺吧。对于一面提及到的知识点回去好好温习巩固一下。只是提前批的第一波，不知道后面的公司有没有音讯，继续学习。期待能有二面吧，目前还是很想去字节上班的。</p>
]]></content>
  </entry>
  <entry>
    <title>动态库与静态库的区别</title>
    <url>/2020/ckcm2x6hc00046c9kaa4g0g2n/</url>
    <content><![CDATA[<ul>
<li>区别：静态库和动态库最本质的区别就是：该库是否被编译进目标（程序）内部。</li>
</ul>
<h4 id="静态（函数）库"><a href="#静态（函数）库" class="headerlink" title="静态（函数）库"></a>静态（函数）库</h4><p>一般拓展名为（.a或者.lib),这类的函数库通常拓展名为libxxx.a或者xxx.lib。<br>这类库在编译的时候会直接整合到目标程序中，所以利用静态函数库编译程的文件会比较大，这类函数库最大的优点就是编译成功的可执行文件可以独立运行，而不再需要向外部要求读取函数库的内容；但是从升级难易度来看明显没有优势，如果函数库更新，需要重新编译。</p>
<h4 id="动态函数库"><a href="#动态函数库" class="headerlink" title="动态函数库"></a>动态函数库</h4><p>动态函数库的拓展名一般为 （.so或.dll)，这类函数库通常名为libxxx.so或xxx.dll。<br>与静态函数库被整个捕捉到程序中不同，动态函数库在编译的时候，在程序中只有一个“指向”的位置而已，也就是说当可执行文件需要使用到函数库的机制时，程序才会去读取函数库来使用；也就是说可执行文件无法单独运行。这样从产品功能升级角度方便升级，只要替换对应动态库即可，不必重新编译整个可执行文件。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>从产品化的角度，发布的算法库和功能库尽量使用动态库，这样方便更新和升级，不必重新编译整个可执行文件，只需新版本动态库替换掉旧动态库即可。</li>
<li>从函数库集成的角度，若要将发布的所有子库（不止一个）集成成一个动态库向外提供接口，那么就需要将所有子库编译为静态库，这样所有子库就可以全部编译进目标动态库中，由最终的一个集成库向外提供功能。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>虚函数</title>
    <url>/2020/ckcm2x6hp000e6c9k9kuegl47/</url>
    <content><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在c++中，基类必须指出派生类重定义哪些函数，定义为virtual的函数是基类期待派生类重新定义的，基类希望派生类继承的函数不能定义为虚函数。（c++ primer）</p>
<h3 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h3><p>在C++中，通过基类的引用（或指针）调用虚函数时，发生动态绑定。引用（或指针）即可以指向基类对象也可以指向派生类对象，这一事实是动态绑定的关键。用引用（或指针）调用虚函数在<u><strong>运行</strong></u>时确定，被调用的函数是引用（或指针）所指对象的实际类型所定义的。</p>
<p>保留字virtual的目的是启用动态绑定。成员默认是非虚函数，对非虚函数的调用在<u><strong>编译</strong></u>时确定。为了指明函数为虚函数，在其返回类型类型前面加上保留字virtual。除了构造函数外，任何非static成员函数都可以是虚函数。保留字virtual只能在类内部的成员函数声明中出现，不能在类定义体外部出现的函数定义上。</p>
<h3 id="派生类与虚函数"><a href="#派生类与虚函数" class="headerlink" title="派生类与虚函数"></a>派生类与虚函数</h3><p>尽管不是必须这么做，派生类一般会重定义所继承的虚函数。如果派生类没有重定义某个虚函数，则使用基类中定义的版本。派生类必须对想要重定义的每个继承成员进行声明。派生类中虚函数的声明必须与基类中的定义方式完全匹配，但有一个例外：返回对基类型的引用（或指针）的虚函数。派生类中的虚函数可以返回基类函数所返回类型的派生类的引用（或指针）。</p>
<p>tips：一旦函数在基类中声明为虚函数，他就一直为虚函数，派生类无法改变该函数为虚函数这一事实。派生类重定义虚函数时，可以使用virtual保留字，但不是必须这么做。</p>
<h3 id="覆盖虚函数机制"><a href="#覆盖虚函数机制" class="headerlink" title="覆盖虚函数机制"></a>覆盖虚函数机制</h3><p>在某些情况下，希望覆盖虚函数机制并强制函数调用使用虚函数的特定版本，这时可以用作用域操作符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Item_base *baseP &#x3D; &amp;derived;</span><br><span class="line">&#x2F;&#x2F; calls version from the base class regardless of the dynamic type of baseP</span><br><span class="line">double d &#x3D; baseP -&gt; Item_base::net_prise(42);</span><br></pre></td></tr></table></figure>
<p>这段代码强制将net_price调用确定为Item_base中定义的版本，该调用将在编译时确定。<br>为什么会希望覆盖虚函数机制？最常见的理由是为了派生类虚函数调用基类中的版本。在这种情况下，基类版本可以完成继承层次中所有类型的公共任务，而每个派生类型只添加自己的特殊工作。</p>
<p>tips：派生类虚函数调用基类版本时，必须显式使用作用域操作符。如果派生类忽略这样做，则函数调用会在运行时确定并且将是一个自身调用，从而导致无穷递归。</p>
<h3 id="虚函数与默认实参"><a href="#虚函数与默认实参" class="headerlink" title="虚函数与默认实参"></a>虚函数与默认实参</h3><p>像其他任何函数一样，虚函数也可以有默认实参值，该值将在编译时确定。如果一个调用省略了具有默认值的实参，则所用的值由调用该函数类型定义，与对象的动态类型无关。通过基类的引用或指针调用虚函数时，默认实参为在基类虚函数声明中指定的值，如果通过派生类的指针或引用调用虚函数，则默认实参是在派生类版本中声明的值。</p>
<p>在同一虚函数的基类版本和派生类版本中使用不同的默认实参几乎一定会引起麻烦。如果通过基类的引用或指针调用虚函数，但实际执行的是派生类中定义的版本，这时就可能会出现问题。在这种情况下，为虚函数的基类版本定义的默认实参将传给派生类定义的版本，而派生类版本是用不同的默认实参定义的。</p>
<h3 id="c-的多态性"><a href="#c-的多态性" class="headerlink" title="c++的多态性"></a>c++的多态性</h3><p>引用和指针的静态类型和动态类型可以不同，这是C++用以支持多态性的基石。</p>
<p>通过基类引用或指针调用基类中定义的函数时，我们并不知道执行函数的对象的确切类型，执行函数的对象可能是基类类型的，也可能是派生类型的。</p>
<p>如果调用非虚函数，则无论实际对象是什么类型，都执行基类类型所定义的函数。如果调用虚函数，则直到运行时才能确定调用哪个函数，运行的虚函数是引用所绑定的或指针所指向的对象所属类型定义的版本。</p>
<h3 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h3><p>自动调用基类部分的析构函数对基类的设计有重要影响。</p>
<p>删除指向动态分配对象的指针时，需要运行析构函数在释放对象的内存之前清理对象。处理继承层次中的对象时，指针的静态类型可能与删除对象的动态类型不同，可能会删除实际指向派生类对象的基类类型指针。</p>
<p>如果删除基类指针，则需要运行基类析构函数并清除基类的成员，如果对象实际时派生类型的，则没有定义该行为。要保证运行适当的析构函数，基类中的析构函数必须为虚函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Item_base &#123;</span><br><span class="line">public:</span><br><span class="line">    &#x2F;&#x2F; no work,but virtual destructor needed</span><br><span class="line">    &#x2F;&#x2F; if base pointer that points to a derived object is ever deleted</span><br><span class="line">    virtual ~Item_base() &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>如果析构函数为虚函数，那么通过指针调用时，运行哪个析构函数将因指针所指对象类型的不同而不同：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Item_base *itemP &#x3D; new Item_base; &#x2F;&#x2F; same static and dymatic type </span><br><span class="line">delete item; &#x2F;&#x2F; ok:destructor for Item_base called</span><br><span class="line">itemP &#x3D; new Bulk_item; &#x2F;&#x2F; ok:static and dynamic types differ</span><br><span class="line">delete itemP; &#x2F;&#x2F; ok:destructor for Bulk_item called</span><br></pre></td></tr></table></figure>
<p>像其他虚函数一样，析构函数的性质都将继承。因此，如果层次中根类的析构函数也虚函数，则派生类析构函数也将是虚函数，无论派生类显式定义析构函数还是使用合成析构函数，派生类析构函数都是虚函数。</p>
<p>基类虚构函数式三法则的一个重要例外。三法则指出，如果类需要析构函数，则类几乎也确实需要其他复制控制成员，基类几乎总是需要析构函数，从而可以将析构函数设定为虚函数。如果基类为了将析构函数设为虚函数而具有空析构函数，那么，类具有析构函数并不表示需要赋值操作符或复制构造函数。</p>
<p>tips：即使析构函数没有工作要做，继承层次的根类也应该定义一个虚析构函数。</p>
<h4 id="构造函数和复制操作符不是虚函数"><a href="#构造函数和复制操作符不是虚函数" class="headerlink" title="构造函数和复制操作符不是虚函数"></a>构造函数和复制操作符不是虚函数</h4><p>在复制控制成员中， 只有析构函数应定义为虚函数，构造函数不能定义为虚函数。构造函数是对对象完全构造之前运行的，在构造函数运行的时候，对象的动态类型还不完整。</p>
<p>虽然可以在基类中将对象成员函数 operator=定义为虚函数，但这样做并不影响派生类中使用的复制操作符。每个类有自己的赋值操作符，派生类中的赋值操作符有一个与类本身类型相同的形参，该类型必须不同于继承层次中任何其他类的赋值操作符的形参类型。</p>
<p>将赋值操作符设为虚函数可能会令人混淆，因为虚函数必须在基类和派生类中具有相同的形参。基类赋值操作符有一个形参是自身类类型的引用，如果该操作符为虚函数，则每个类型都将得到一个虚函数成员，该成员定义了参数为一个基类对象的operator=。但是，对派生类而言，这个操作符与赋值操作符是不同的。</p>
<p>tips：将类的赋值操作符定义为虚函数很可能令人混淆，而且没什么用处。</p>
<h3 id="构造函数和析构函数中的虚函数"><a href="#构造函数和析构函数中的虚函数" class="headerlink" title="构造函数和析构函数中的虚函数"></a>构造函数和析构函数中的虚函数</h3><p>构造派生类对象时首先运行基类构造函数初始化对象的基类部分。在执行基类构造函数时，对象的派生类部分是未初始化的。实际上，此时对象还不是一个派生类对象。</p>
<p>撤销派生类对象时，首先撤销它的派生类部分，然后按照与构造顺序的逆序撤销它的基类部分。</p>
<p>在这两种情况下，运行构造函数或析构函数的时候，对象都是不完整的。为了适应这种不完整，编译器将对象的类型视为在构造或析构期间发生了变化。在基类构造函数或析构函数中，将派生类对象作为基类类型对象对待。</p>
<p>构造或析构期间的对象类型对虚函数的绑定有影响。</p>
<p>tips：如果在构造函数或析构函数中调用虚函数，则运行的是为构造函数或析构函数自身类型定义的版本。</p>
<p>无论由构造函数（或析构函数）直接调用虚函数，或者从构造函数（或虚构函数）所调用的函数间接调用虚函数，都应用这种绑定。</p>
<p>要理解这种行为，考虑如果从基类构造函数（或析构函数）调用虚函数的派生类版本会怎样。虚函数的派生类版本很可能会访问派生类对象的成员，毕竟，如果派生类版本不需要使用派生类对象的成员，派生类多半能够使用基类中的定义。但是，对象的派生部分的成员不会在基类构造函数运行期间初始化，实际上，如果允许这样的访问，程序很可能会崩溃。 </p>
]]></content>
  </entry>
  <entry>
    <title>new与malloc的区别</title>
    <url>/2020/ckcm2x6ho000d6c9k6cv1drop/</url>
    <content><![CDATA[<h4 id="1-molloc与free是C-c语言的标准函数，-new-delete是c-的运算符。"><a href="#1-molloc与free是C-c语言的标准函数，-new-delete是c-的运算符。" class="headerlink" title="1. molloc与free是C++/c语言的标准函数， new/delete是c++的运算符。"></a>1. molloc与free是C++/c语言的标准函数， new/delete是c++的运算符。</h4><h4 id="2-他们都可以用于申请动态内存和释放内存。new-delete比molloc-free更加智能，其实底层也是执行的malloc-free。为啥说new-delete更加的智能？因为new和delete在对象创建的时候自动执行构造函数，对象消亡之前会自动执行析构函数。"><a href="#2-他们都可以用于申请动态内存和释放内存。new-delete比molloc-free更加智能，其实底层也是执行的malloc-free。为啥说new-delete更加的智能？因为new和delete在对象创建的时候自动执行构造函数，对象消亡之前会自动执行析构函数。" class="headerlink" title="2.他们都可以用于申请动态内存和释放内存。new/delete比molloc/free更加智能，其实底层也是执行的malloc/free。为啥说new/delete更加的智能？因为new和delete在对象创建的时候自动执行构造函数，对象消亡之前会自动执行析构函数。"></a>2.他们都可以用于申请动态内存和释放内存。new/delete比molloc/free更加智能，其实底层也是执行的malloc/free。为啥说new/delete更加的智能？因为new和delete在对象创建的时候自动执行构造函数，对象消亡之前会自动执行析构函数。</h4><h5 id="既然new-delete的功能完全覆盖了malloc和free，-为什么c-中不把malloc-free淘汰出局呢？"><a href="#既然new-delete的功能完全覆盖了malloc和free，-为什么c-中不把malloc-free淘汰出局呢？" class="headerlink" title="既然new/delete的功能完全覆盖了malloc和free， 为什么c++中不把malloc/free淘汰出局呢？"></a>既然new/delete的功能完全覆盖了malloc和free， 为什么c++中不把malloc/free淘汰出局呢？</h5><h5 id="因为c-程序经常要调用c语言，而c语言只能用malloc-free管理动态内存。"><a href="#因为c-程序经常要调用c语言，而c语言只能用malloc-free管理动态内存。" class="headerlink" title="因为c++程序经常要调用c语言，而c语言只能用malloc/free管理动态内存。"></a>因为c++程序经常要调用c语言，而c语言只能用malloc/free管理动态内存。</h5><h4 id="3-new返回指定类型的指针，并且可以自动计算出所需要的大小。malloc必须用户指定大小，并且默认返回类型为void-，-必须强制转换为实际类型的指针。"><a href="#3-new返回指定类型的指针，并且可以自动计算出所需要的大小。malloc必须用户指定大小，并且默认返回类型为void-，-必须强制转换为实际类型的指针。" class="headerlink" title="3. new返回指定类型的指针，并且可以自动计算出所需要的大小。malloc必须用户指定大小，并且默认返回类型为void*， 必须强制转换为实际类型的指针。"></a>3. new返回指定类型的指针，并且可以自动计算出所需要的大小。malloc必须用户指定大小，并且默认返回类型为void*， 必须强制转换为实际类型的指针。</h4>]]></content>
  </entry>
  <entry>
    <title>进程和线程</title>
    <url>/2020/ckcm2x6hn000c6c9k25zy91gr/</url>
    <content><![CDATA[<h3 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h3><ul>
<li>进程是正在运行的一个应用程序，程序一旦运行就是进程。</li>
<li>进程是系统进行资源分配的最小单位，每个进程拥有独立的地址空间。</li>
<li>一个进程无法直接去访问另外一个进程的变量和数据结构，需要进行进程间通信，包括管程，消息队列。</li>
<li>线程是进程的一个实体，是资源调度的基本单位。</li>
</ul>
<h3 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h3><ul>
<li>同一进程的线程共享进程的地址空间，而进程之间则是独立的地址空间</li>
<li>同一进程内的线程共享本进程的资源，但是进程之间的资源是独立的</li>
<li>一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃后，整个进程崩溃</li>
<li>进程切换，消耗资源大，线程切换时间少于进程</li>
<li>二者均可以并发执行</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>java的基本程序设计结构</title>
    <url>/2020/ckcm2x6he00066c9k896k047z/</url>
    <content><![CDATA[<h2 id="最简单的Java程序"><a href="#最简单的Java程序" class="headerlink" title="最简单的Java程序"></a>最简单的Java程序</h2><ul>
<li><p>java区分大小写</p>
</li>
<li><p>java应用程序的全部内容必须放置在类中</p>
</li>
<li><p>每个句子由分号结尾，回车不是句子的结尾</p>
</li>
</ul>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul>
<li><p>单行注释//</p>
</li>
<li><p>多行注释/*      */</p>
</li>
<li><p>自动生成文档/**     */</p>
</li>
</ul>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h4><ul>
<li><p>int</p>
<ul>
<li>4字节</li>
</ul>
</li>
<li><p>short</p>
<ul>
<li>2字节</li>
</ul>
</li>
<li><p>long</p>
<ul>
<li>8字节</li>
</ul>
</li>
<li><p>byte</p>
<ul>
<li>1字节</li>
</ul>
</li>
</ul>
<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><ul>
<li><p>float</p>
<ul>
<li>4字节</li>
</ul>
</li>
<li><p>double</p>
<ul>
<li>8字节</li>
</ul>
</li>
</ul>
<h3 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h3><ul>
<li>常用字符采用单字节编码，，而另一些字符而需要两个或者更多个字节。在Java中采用UTF-16所以占用2字节</li>
</ul>
<h3 id="boolean（布尔）类型"><a href="#boolean（布尔）类型" class="headerlink" title="boolean（布尔）类型"></a>boolean（布尔）类型</h3><ul>
<li><p>1位</p>
<ul>
<li>只有0和1</li>
</ul>
</li>
<li><p>1字节</p>
<ul>
<li>1字节是计算机处理最小单位</li>
</ul>
</li>
<li><p>4字节</p>
<ul>
<li>java虚拟机规范里规定</li>
</ul>
</li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li><p>命名允许字符，数字和字母。字母包括’A’ ~ ‘Z’、 ‘a’ ~ ‘z’、’_’、’$’或者某种语言中表示字母的任何Unicode字符。数字包括’0’ ~ ‘9’和某种语言中表示数字的任何Unicode字符。</p>
</li>
<li><p>利用关键字final指示常量</p>
</li>
<li><p>声明一个变量后，必须用赋值语句对变量进行显式初始化，千万不要使用未初始化对变量</p>
</li>
</ul>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul>
<li><p>各运算符的优先级</p>
</li>
<li><p>各数据类型之间的强制类型转换</p>
</li>
</ul>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul>
<li><p>字符串的不可变属性</p>
</li>
<li><p>字符串类的一些常用接口</p>
</li>
</ul>
<h2 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h2><ul>
<li><p>读取输入</p>
</li>
<li><p>格式化输出</p>
</li>
<li><p>文件的输入与输出</p>
</li>
</ul>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><ul>
<li><p>if else</p>
</li>
<li><p>while</p>
</li>
<li><p>do while</p>
</li>
<li><p>for</p>
</li>
<li><p>break</p>
<p>提供了带标签选项</p>
</li>
<li><p>switch</p>
</li>
<li><p>continue</p>
<p>提供了带标签选项</p>
</li>
</ul>
<h2 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h2><ul>
<li><p>满足更高精度要求的计算</p>
</li>
<li><p>运算需要使用类内方法</p>
</li>
</ul>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul>
<li><p>for each</p>
</li>
<li><p>数据变量是一种引用</p>
</li>
<li><p>多维数组</p>
</li>
<li><p>不规则数组</p>
</li>
</ul>
<p><em>XMind: ZEN - Trial Version</em></p>
]]></content>
  </entry>
  <entry>
    <title>数据链路层</title>
    <url>/2020/ckcm2x6gv00026c9kavlhd5y3/</url>
    <content><![CDATA[<h2 id="使用点对点信道的数据链路层"><a href="#使用点对点信道的数据链路层" class="headerlink" title="使用点对点信道的数据链路层"></a>使用点对点信道的数据链路层</h2><h3 id="点对点信道的数据链路层在进行通信时的主要步骤如下"><a href="#点对点信道的数据链路层在进行通信时的主要步骤如下" class="headerlink" title="点对点信道的数据链路层在进行通信时的主要步骤如下"></a>点对点信道的数据链路层在进行通信时的主要步骤如下</h3><ul>
<li>1.结点A的数据链路层把网络层交下来的IP数据报添加首部和尾部封装成帧</li>
<li>2.结点A把封装好的帧发生发生给结点B的数据链路层</li>
<li>3.若结点B的数据链路层收到的帧无差错，则从收到的帧中提取 出IP数据报交给上面的网络层；否则丢弃这个帧</li>
</ul>
<h3 id="三个基本问题"><a href="#三个基本问题" class="headerlink" title="三个基本问题"></a>三个基本问题</h3><ul>
<li><p>封装成帧</p>
<ul>
<li>在一段数据的前后分布添加首部和尾部，这样就构成了一个帧</li>
<li>MTU(Maximum Transfer Unit)最大传送单元是指帧的数据部分长度上限,默认值1500字节</li>
</ul>
</li>
<li><p>透明传输</p>
<ul>
<li>“透明”表示某一个实际存在的事物看起来却好像不存在。这些数据就“看不见”数据链路层有什么防碍数据传输的东西。</li>
<li>为解决透明传输问题，发送端的数据链路层在出现控制字符“SOH”和“EOT”之前加入转义字符“ESC”，在接收端的数据链路层把数据运往网络层之前删除这些之前插入的转义字符。这种方法叫字节填充或字符填充。</li>
</ul>
</li>
<li><p>差错检测</p>
<ul>
<li><p>误码率</p>
<ul>
<li>在一段时间内，传输错误的比特占所传输比特总数的比率</li>
</ul>
</li>
<li><p>循环冗余检测CRC(Cyclic Redundancy Check)</p>
<ul>
<li>在每组数据后面增加n位冗余码供差错检测</li>
</ul>
</li>
<li><p>帧检验序列FCS(Frame Check Sequence)</p>
<ul>
<li>CRC是一种检错方法，而FSC是添加在数据后面的冗余码，在检错方法上可以选用CRC，但也可以不选用CRC</li>
</ul>
</li>
<li><p>数据链路层若仅仅使用CRC差错检测技术，则只能做到对帧但无差错接收</p>
</li>
<li><p>传输差错</p>
<ul>
<li><p>比特差错</p>
<ul>
<li>比特在传输过程中可能会产生差错，1变0，0变1</li>
</ul>
</li>
<li><p>没有比特差错</p>
<ul>
<li>帧丢失</li>
<li>帧重复</li>
<li>帧失序</li>
</ul>
</li>
</ul>
</li>
<li><p>对于通信质量较差但无线传输链路，数据链路层协议使用确认和重传机制，数据链路层向上提供可靠传输的服务</p>
</li>
</ul>
</li>
</ul>
<h2 id="点对点协议PPP-Point-to-Point-Protocol"><a href="#点对点协议PPP-Point-to-Point-Protocol" class="headerlink" title="点对点协议PPP(Point -to-Point Protocol)"></a>点对点协议PPP(Point -to-Point Protocol)</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li><p>应该满足的需求</p>
<ul>
<li>简单</li>
<li>封装成帧</li>
<li>透明性</li>
<li>多种网络层协议</li>
<li>多种类型链路</li>
<li>差错检测</li>
<li>检测连接状态</li>
<li>最大传送单元</li>
<li>网络层地址协商</li>
<li>数据压缩协商</li>
</ul>
</li>
<li><p>组成</p>
<ul>
<li>一个将IP数据报封装到串行链路的方法。PPP既支持异步链路（无奇偶检验的8比特数据），也支持面向比特的同步链路。IP数据报在PPP帧中就是信息部分。这个信息部分长度受最大传送单元MTU限制</li>
<li>一个用来建立、配置和测试数据链路连接的链路控制协议LCP(Link Control Protocol)。通信双方可以协商一些选项。在RFC 1661中定义了11种类型的LCP分组</li>
<li>一套网络控制协议NCP(Network Control Protocol),其中的每个协议支持不同的网络层协议，如IP、OSI的网络层、DECnet、以及AppleTalk等。</li>
</ul>
</li>
</ul>
<h3 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h3><ul>
<li><p>各字段意义</p>
<ul>
<li>首部的第一个字段和尾部的第二个字段F(Flag),规定为0x7E</li>
<li>首部中的字段A规定为0xFF，控制字段C规定为0x03。最初考虑以后再对这两个字段的值进行定义，但自今也没有给出。</li>
<li>PPP首部的第四个字段是2字节的协议字段。当协议字段为0x0021时，PPP帧的信息字段就是IP数据报。若为0xC021，则信息字段是PPP链路控制协议LCP的数据，而0x8021表示网络层的控制数据。</li>
<li>信息字段的长度是可变的，不超过1500字节</li>
<li>尾部中的第一个字段(2字节)是使用CRC的帧检验序列FCS</li>
</ul>
</li>
<li><p>字节填充</p>
<ul>
<li><p>当PPP使用异步传输时，他把转义符定义为0x7D，并使用字节填充</p>
<ul>
<li>把信息字段中出现的每一个0x7E字节转变为2字节序列(0x7D,0x5E)</li>
<li>若信息字段中出现一个0x7D的字节(即出现了和转义字符一样的比特组合），则把0x7D转变为2字节序列(0x7D,0x5D)</li>
<li>若信息字段中出现ASCII码的控制符（即树枝小于0x20的字符），则在字符前面加上一个0x7D字节，同时把该字符的编码加以改变。例如，出现0x03就把它转变为2字节序列(0x7D,0x23)</li>
</ul>
</li>
</ul>
</li>
<li><p>零比特填充</p>
<ul>
<li><p>PPP协议用在SONET/SDH链路时，使用同步传输（一连串的比特连续传送）而不是异步传输（逐个字符地传送）</p>
<ul>
<li>在发送端，先扫描整个信息字段（通常用硬件实现，但也是可用软件实现，只是会慢些）。只要发现有5个连续1，则立即填入一个0.因此经过这个零比特填充后的数据，就可以保证在信息字段不会出现6个连续1。接收端在收到一个帧时，先找到标志字段F以确定一个帧的边界，接着再用硬件对其中的比特流进行扫描。每当发现5个连续1时，就把这5个连续1后的0删除，以还原成原来的信息比特流</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="工作状态"><a href="#工作状态" class="headerlink" title="工作状态"></a>工作状态</h3><ul>
<li>当用户拨号接入ISP后，就建立一条从用户个人电脑到ISP的物理连接。这时，用户个人电脑向ISP发送一系列的链路控制协议LCP分组（封装成多个PPP帧），以便建立LCP连接。这些分组以及其响应选择了将要使用的一些PPP参数。接着还要进行网络层配置，网络控制协议NCP给新接入的用户个人电脑分配一些临时的IP地址。这样，用户个人电脑就称为互联网上的一个有IP地址的主机了</li>
</ul>
<h2 id="使用广播信道的数据链路层"><a href="#使用广播信道的数据链路层" class="headerlink" title="使用广播信道的数据链路层"></a>使用广播信道的数据链路层</h2><h3 id="局域网的数据链路层"><a href="#局域网的数据链路层" class="headerlink" title="局域网的数据链路层"></a>局域网的数据链路层</h3><ul>
<li><p>局域网的优点</p>
<ul>
<li>具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源</li>
<li>便于系统的扩展和逐渐演变，各设备的位置可灵活调节和改变</li>
<li>提高了系统的可靠性、可用性和生存性</li>
</ul>
</li>
<li><p>局域网按网络拓扑分类</p>
<ul>
<li>星形网</li>
<li>环形网</li>
<li>总线网</li>
</ul>
</li>
<li><p>共享信道技术上的两种方法</p>
<ul>
<li><p>静态划分信道</p>
<ul>
<li>频分复用、时分复用、波分复用和码分复用等，用户只要分配到了信道就不会和其他用户发送冲突。但这种方法代价较高，不适合局域网使用</li>
</ul>
</li>
<li><p>动态媒体接入控制</p>
<ul>
<li><p>随机接入</p>
<ul>
<li>随机接入的特点是所有的用户可随机地发送信息。但如果恰巧有两个或更多但用户在同一时刻发送信息，那么在共享媒体上就要产生碰撞（即发送了冲突），使得这些用户但发送都失败。因此，必须有解决碰撞的网络协议。</li>
</ul>
</li>
<li><p>受控接入</p>
<ul>
<li>受控接入的特点是用户不能随机地发送信息而必须服从一定的控制。这类的典型代表有分散控制的令牌环局域网和集中控制的多点线路探询（polling），或称为轮询。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>IEEE802委员会曾把局域网的数据链路层拆成两个子层，即逻辑链路控制（LLC）子层（与传输媒体无关）和媒体接入控制子层（MAC）子层（与传输媒体有关）。但现在LLC子层已成历史。MAC（Medium Access Control）LLC（Logical Link Control）</p>
</li>
<li><p>计算机与外界局域网的通信要通过通信适配器（或网络适配器），它又称为网络接口卡或网卡。计算机的硬件地址就在适配器的ROM中</p>
</li>
</ul>
<h3 id="CSMA-CD协议"><a href="#CSMA-CD协议" class="headerlink" title="CSMA/CD协议"></a>CSMA/CD协议</h3><ul>
<li><p>协议要点</p>
<ul>
<li><p>多点接入</p>
<ul>
<li>说明这是总线型网络，许多计算机以多点接入的方式连接在一个总线上</li>
</ul>
</li>
<li><p>载波监听</p>
<ul>
<li>载波监听就是检测信道。不管发送前，还是发送中，每个站都必须不停地检测信道</li>
</ul>
</li>
<li><p>碰撞检测</p>
<ul>
<li>就是“便发送边监听”，即适配器边发送数据边检测信道上的信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据</li>
</ul>
</li>
</ul>
</li>
<li><p>总结</p>
<ul>
<li><p>准备发送</p>
<ul>
<li>适配器从网络层获得一个分组，加上以太网的首部和尾部，以组成以太网帧，放入适配器的缓存中。但是发送之前，必须先检测信道</li>
</ul>
</li>
<li><p>检测信道</p>
<ul>
<li>若检测到信道忙，则应不停地检测，一直等待信道转为空闲。若检测到信道空闲，并在96比特时间内信道保持空闲（保证了帧间最小间隔），就发送这个帧。</li>
</ul>
</li>
<li><p>在发送过程中仍不停地检测信道，即网络适配器要边发送边监听</p>
<ul>
<li>发送成功：争用期内一直为检测到碰撞。这个帧肯定能够发送成功。发送完毕后，其他什么也不做。然后回到准备发送的状态。</li>
<li>发送失败：在争用期内检测到碰撞。这时立即停止发送数据，并按规定发送人为干扰信号。适配器接着执行指数退避算法，等待r倍512比特时间后，返回到检测信道。但若重传达16次仍不成功，则停止重传而向上报错</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="集线器"><a href="#集线器" class="headerlink" title="集线器"></a>集线器</h3><ul>
<li>使用集线器物理上是星型网实际，在逻辑上仍然是一个总线网，各站使用的还是CSMA/CD协议</li>
<li>集线器有很多接口，很像一个多接口的转发器</li>
<li>集线器工作在物理层，工作只是简单地转发，不进行碰撞检测</li>
<li>集线器采用了专门的芯片，进行自适应串音回波抵消</li>
</ul>
<h3 id="以太网的MAC层（medium-access-control）"><a href="#以太网的MAC层（medium-access-control）" class="headerlink" title="以太网的MAC层（medium access control）"></a>以太网的MAC层（medium access control）</h3><ul>
<li><p>MAC层的硬件地址</p>
<ul>
<li>硬件地址又称为物理地址或MAC地址</li>
<li>MAC地址固化在适配器的ROM中</li>
</ul>
</li>
<li><p>MAC帧的格式</p>
<ul>
<li><p>第一个字段：6字节长的目的地址</p>
</li>
<li><p>第二个字段：6字节长的源地址</p>
</li>
<li><p>第三个字段：2字节长的类型字段</p>
<ul>
<li>IP数据报：0x0800</li>
<li>Novell IPX：0x8137</li>
</ul>
</li>
<li><p>第四个字段：长度在46到1500字节之间的数据字段</p>
</li>
<li><p>第五个字段：4字节的帧检验序列FCS（使用CRC检验）</p>
</li>
</ul>
</li>
</ul>
<h3 id="扩展的以太网"><a href="#扩展的以太网" class="headerlink" title="扩展的以太网"></a>扩展的以太网</h3><ul>
<li>使用集线器在物理层扩展以太网</li>
<li>交换式集线器常称为以太网交换机或第二层交换机（工作在数据链路层）。他就是一个多接口的网桥，而每个接口都直接与某台主机或另一个集线器相连，且工作在全双工方式。以太网交换机能同时连通许多对的接口，使每一对相互通信的主机都能像独占通信媒体那样，无碰撞地传输数据</li>
</ul>
<p><em>XMind: ZEN - Trial Version</em></p>
]]></content>
  </entry>
  <entry>
    <title>我的博客诞生了</title>
    <url>/2020/ckcm2x6hk00086c9k0c3i4vtb/</url>
    <content><![CDATA[<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul>
<li>macbook pro 2019 </li>
</ul>
<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>下载并安装</p>
<ul>
<li>git</li>
<li>node.js</li>
</ul>
<p><em>tips：如果下载速度过慢，可以找下国内镜像仓库</em><br><em>npm的国内镜像<a href="https://npm.taobao.org/mirrors/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/</a></em><br><em>上面这个网址里也有git的资源</em></p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p><code>$ npm install -g hexo-cli</code></p>
<h3 id="github仓库建立"><a href="#github仓库建立" class="headerlink" title="github仓库建立"></a>github仓库建立</h3><p>仓库名必须满足：<br><code>&lt;用户名&gt;.github.io</code></p>
<h3 id="github-pages部署"><a href="#github-pages部署" class="headerlink" title="github pages部署"></a>github pages部署</h3><ol>
<li>安装hexo-deployer-git<br><code>npm install hexo-deployer-git</code></li>
<li>修改配置文件_config.yml<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delpoy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:github.com&#x2F;&lt;用户名&gt;&#x2F;&lt;用户名&gt;.github.io</span><br><span class="line">  branch:gh-pages</span><br></pre></td></tr></table></figure></li>
<li>运行<code>hexo clean &amp;&amp; hexo deploy</code></li>
<li>查看你的github网站是否更改</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/ckcm2x6gw00036c9k12uz10lg/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
