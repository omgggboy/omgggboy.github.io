<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java的基本程序设计结构</title>
    <url>/2020/ck7xegbul0002tw96ftvl8tu9/</url>
    <content><![CDATA[<h2 id="最简单的Java程序"><a href="#最简单的Java程序" class="headerlink" title="最简单的Java程序"></a>最简单的Java程序</h2><h3 id="java区分大小写"><a href="#java区分大小写" class="headerlink" title="java区分大小写"></a>java区分大小写</h3><h3 id="java应用程序的全部内容必须放置在类中"><a href="#java应用程序的全部内容必须放置在类中" class="headerlink" title="java应用程序的全部内容必须放置在类中"></a>java应用程序的全部内容必须放置在类中</h3><h3 id="每个句子由分号结尾，回车不是句子的结尾"><a href="#每个句子由分号结尾，回车不是句子的结尾" class="headerlink" title="每个句子由分号结尾，回车不是句子的结尾"></a>每个句子由分号结尾，回车不是句子的结尾</h3><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释//"></a>单行注释//</h3><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释/*      */"></a>多行注释/*      */</h3><h3 id="自动生成文档"><a href="#自动生成文档" class="headerlink" title="自动生成文档/**     */"></a>自动生成文档/**     */</h3><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h3><ul>
<li><p>int</p>
<ul>
<li>4字节</li>
</ul>
</li>
<li><p>short</p>
<ul>
<li>2字节</li>
</ul>
</li>
<li><p>long</p>
<ul>
<li>8字节</li>
</ul>
</li>
<li><p>byte</p>
<ul>
<li>1字节</li>
</ul>
</li>
</ul>
<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><ul>
<li><p>float</p>
<ul>
<li>4字节</li>
</ul>
</li>
<li><p>double</p>
<ul>
<li>8字节</li>
</ul>
</li>
</ul>
<h3 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h3><ul>
<li>常用字符采用单字节编码，，而另一些字符而需要两个或者更多个字节。在Java中采用UTF-16所以占用2字节</li>
</ul>
<h3 id="boolean（布尔）类型"><a href="#boolean（布尔）类型" class="headerlink" title="boolean（布尔）类型"></a>boolean（布尔）类型</h3><ul>
<li><p>1位</p>
<ul>
<li>只有0和1</li>
</ul>
</li>
<li><p>1字节</p>
<ul>
<li>1字节是计算机处理最小单位</li>
</ul>
</li>
<li><p>4字节</p>
<ul>
<li>java虚拟机规范里规定</li>
</ul>
</li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="命名允许字符，数字和字母。字母包括’A’-‘Z’、-‘a’‘z’、’-’、’-’或者某种语言中表示字母的任何Unicode字符。数字包括’0’‘9’和某种语言中表示数字的任何Unicode字符。"><a href="#命名允许字符，数字和字母。字母包括’A’-‘Z’、-‘a’‘z’、’-’、’-’或者某种语言中表示字母的任何Unicode字符。数字包括’0’‘9’和某种语言中表示数字的任何Unicode字符。" class="headerlink" title="命名允许字符，数字和字母。字母包括’A’~ ‘Z’、 ‘a’‘z’、’_’、’$’或者某种语言中表示字母的任何Unicode字符。数字包括’0’‘9’和某种语言中表示数字的任何Unicode字符。"></a>命名允许字符，数字和字母。字母包括’A’~ ‘Z’、 ‘a’<del>‘z’、’_’、’$’或者某种语言中表示字母的任何Unicode字符。数字包括’0’</del>‘9’和某种语言中表示数字的任何Unicode字符。</h3><h3 id="利用关键字final指示常量"><a href="#利用关键字final指示常量" class="headerlink" title="利用关键字final指示常量"></a>利用关键字final指示常量</h3><h3 id="声明一个变量后，必须用赋值语句对变量进行显式初始化，千万不要使用未初始化对变量"><a href="#声明一个变量后，必须用赋值语句对变量进行显式初始化，千万不要使用未初始化对变量" class="headerlink" title="声明一个变量后，必须用赋值语句对变量进行显式初始化，千万不要使用未初始化对变量"></a>声明一个变量后，必须用赋值语句对变量进行显式初始化，千万不要使用未初始化对变量</h3><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="各运算符的优先级"><a href="#各运算符的优先级" class="headerlink" title="各运算符的优先级"></a>各运算符的优先级</h3><h3 id="各数据类型之间的强制类型转换"><a href="#各数据类型之间的强制类型转换" class="headerlink" title="各数据类型之间的强制类型转换"></a>各数据类型之间的强制类型转换</h3><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串的不可变属性"><a href="#字符串的不可变属性" class="headerlink" title="字符串的不可变属性"></a>字符串的不可变属性</h3><h3 id="字符串类的一些常用接口"><a href="#字符串类的一些常用接口" class="headerlink" title="字符串类的一些常用接口"></a>字符串类的一些常用接口</h3><h2 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h2><h3 id="读取输入"><a href="#读取输入" class="headerlink" title="读取输入"></a>读取输入</h3><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><h3 id="文件的输入与输出"><a href="#文件的输入与输出" class="headerlink" title="文件的输入与输出"></a>文件的输入与输出</h3><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><ul>
<li>do while</li>
</ul>
<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><ul>
<li>提供了带标签选项</li>
</ul>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><ul>
<li>提供了带标签选项</li>
</ul>
<h2 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h2><h3 id="满足更高精度要求的计算"><a href="#满足更高精度要求的计算" class="headerlink" title="满足更高精度要求的计算"></a>满足更高精度要求的计算</h3><h3 id="运算需要使用类内方法"><a href="#运算需要使用类内方法" class="headerlink" title="运算需要使用类内方法"></a>运算需要使用类内方法</h3><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="for-each"><a href="#for-each" class="headerlink" title="for each"></a>for each</h3><h3 id="数据变量是一种引用"><a href="#数据变量是一种引用" class="headerlink" title="数据变量是一种引用"></a>数据变量是一种引用</h3><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><h3 id="不规则数组"><a href="#不规则数组" class="headerlink" title="不规则数组"></a>不规则数组</h3><p><em>XMind: ZEN - Trial Version</em></p>
]]></content>
  </entry>
  <entry>
    <title>数据链路层</title>
    <url>/2020/ck7xegbuf0000tw96fd9j75vb/</url>
    <content><![CDATA[<h2 id="使用点对点信道的数据链路层"><a href="#使用点对点信道的数据链路层" class="headerlink" title="使用点对点信道的数据链路层"></a>使用点对点信道的数据链路层</h2><h3 id="点对点信道的数据链路层在进行通信时的主要步骤如下"><a href="#点对点信道的数据链路层在进行通信时的主要步骤如下" class="headerlink" title="点对点信道的数据链路层在进行通信时的主要步骤如下"></a>点对点信道的数据链路层在进行通信时的主要步骤如下</h3><ul>
<li>1.结点A的数据链路层把网络层交下来的IP数据报添加首部和尾部封装成帧</li>
<li>2.结点A把封装好的帧发生发生给结点B的数据链路层</li>
<li>3.若结点B的数据链路层收到的帧无差错，则从收到的帧中提取 出IP数据报交给上面的网络层；否则丢弃这个帧</li>
</ul>
<h3 id="三个基本问题"><a href="#三个基本问题" class="headerlink" title="三个基本问题"></a>三个基本问题</h3><ul>
<li><p>封装成帧</p>
<ul>
<li>在一段数据的前后分布添加首部和尾部，这样就构成了一个帧</li>
<li>MTU(Maximum Transfer Unit)最大传送单元是指帧的数据部分长度上限,默认值1500字节</li>
</ul>
</li>
<li><p>透明传输</p>
<ul>
<li>“透明”表示某一个实际存在的事物看起来却好像不存在。这些数据就“看不见”数据链路层有什么防碍数据传输的东西。</li>
<li>为解决透明传输问题，发送端的数据链路层在出现控制字符“SOH”和“EOT”之前加入转义字符“ESC”，在接收端的数据链路层把数据运往网络层之前删除这些之前插入的转义字符。这种方法叫字节填充或字符填充。</li>
</ul>
</li>
<li><p>差错检测</p>
<ul>
<li><p>误码率</p>
<ul>
<li>在一段时间内，传输错误的比特占所传输比特总数的比率</li>
</ul>
</li>
<li><p>循环冗余检测CRC(Cyclic Redundancy Check)</p>
<ul>
<li>在每组数据后面增加n位冗余码供差错检测</li>
</ul>
</li>
<li><p>帧检验序列FCS(Frame Check Sequence)</p>
<ul>
<li>CRC是一种检错方法，而FSC是添加在数据后面的冗余码，在检错方法上可以选用CRC，但也可以不选用CRC</li>
</ul>
</li>
<li><p>数据链路层若仅仅使用CRC差错检测技术，则只能做到对帧但无差错接收</p>
</li>
<li><p>传输差错</p>
<ul>
<li><p>比特差错</p>
<ul>
<li>比特在传输过程中可能会产生差错，1变0，0变1</li>
</ul>
</li>
<li><p>没有比特差错</p>
<ul>
<li>帧丢失</li>
<li>帧重复</li>
<li>帧失序</li>
</ul>
</li>
</ul>
</li>
<li><p>对于通信质量较差但无线传输链路，数据链路层协议使用确认和重传机制，数据链路层向上提供可靠传输的服务</p>
</li>
</ul>
</li>
</ul>
<h2 id="点对点协议PPP-Point-to-Point-Protocol"><a href="#点对点协议PPP-Point-to-Point-Protocol" class="headerlink" title="点对点协议PPP(Point -to-Point Protocol)"></a>点对点协议PPP(Point -to-Point Protocol)</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li><p>应该满足的需求</p>
<ul>
<li>简单</li>
<li>封装成帧</li>
<li>透明性</li>
<li>多种网络层协议</li>
<li>多种类型链路</li>
<li>差错检测</li>
<li>检测连接状态</li>
<li>最大传送单元</li>
<li>网络层地址协商</li>
<li>数据压缩协商</li>
</ul>
</li>
<li><p>组成</p>
<ul>
<li>一个将IP数据报封装到串行链路的方法。PPP既支持异步链路（无奇偶检验的8比特数据），也支持面向比特的同步链路。IP数据报在PPP帧中就是信息部分。这个信息部分长度受最大传送单元MTU限制</li>
<li>一个用来建立、配置和测试数据链路连接的链路控制协议LCP(Link Control Protocol)。通信双方可以协商一些选项。在RFC 1661中定义了11种类型的LCP分组</li>
<li>一套网络控制协议NCP(Network Control Protocol),其中的每个协议支持不同的网络层协议，如IP、OSI的网络层、DECnet、以及AppleTalk等。</li>
</ul>
</li>
</ul>
<h3 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h3><ul>
<li><p>各字段意义</p>
<ul>
<li>首部的第一个字段和尾部的第二个字段F(Flag),规定为0x7E</li>
<li>首部中的字段A规定为0xFF，控制字段C规定为0x03。最初考虑以后再对这两个字段的值进行定义，但自今也没有给出。</li>
<li>PPP首部的第四个字段是2字节的协议字段。当协议字段为0x0021时，PPP帧的信息字段就是IP数据报。若为0xC021，则信息字段是PPP链路控制协议LCP的数据，而0x8021表示网络层的控制数据。</li>
<li>信息字段的长度是可变的，不超过1500字节</li>
<li>尾部中的第一个字段(2字节)是使用CRC的帧检验序列FCS</li>
</ul>
</li>
<li><p>字节填充</p>
<ul>
<li><p>当PPP使用异步传输时，他把转义符定义为0x7D，并使用字节填充</p>
<ul>
<li>把信息字段中出现的每一个0x7E字节转变为2字节序列(0x7D,0x5E)</li>
<li>若信息字段中出现一个0x7D的字节(即出现了和转义字符一样的比特组合），则把0x7D转变为2字节序列(0x7D,0x5D)</li>
<li>若信息字段中出现ASCII码的控制符（即树枝小于0x20的字符），则在字符前面加上一个0x7D字节，同时把该字符的编码加以改变。例如，出现0x03就把它转变为2字节序列(0x7D,0x23)</li>
</ul>
</li>
</ul>
</li>
<li><p>零比特填充</p>
<ul>
<li><p>PPP协议用在SONET/SDH链路时，使用同步传输（一连串的比特连续传送）而不是异步传输（逐个字符地传送）</p>
<ul>
<li>在发送端，先扫描整个信息字段（通常用硬件实现，但也是可用软件实现，只是会慢些）。只要发现有5个连续1，则立即填入一个0.因此经过这个零比特填充后的数据，就可以保证在信息字段不会出现6个连续1。接收端在收到一个帧时，先找到标志字段F以确定一个帧的边界，接着再用硬件对其中的比特流进行扫描。每当发现5个连续1时，就把这5个连续1后的0删除，以还原成原来的信息比特流</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="工作状态"><a href="#工作状态" class="headerlink" title="工作状态"></a>工作状态</h3><ul>
<li>当用户拨号接入ISP后，就建立一条从用户个人电脑到ISP的物理连接。这时，用户个人电脑向ISP发送一系列的链路控制协议LCP分组（封装成多个PPP帧），以便建立LCP连接。这些分组以及其响应选择了将要使用的一些PPP参数。接着还要进行网络层配置，网络控制协议NCP给新接入的用户个人电脑分配一些临时的IP地址。这样，用户个人电脑就称为互联网上的一个有IP地址的主机了</li>
</ul>
<h2 id="使用广播信道的数据链路层"><a href="#使用广播信道的数据链路层" class="headerlink" title="使用广播信道的数据链路层"></a>使用广播信道的数据链路层</h2><h3 id="局域网的数据链路层"><a href="#局域网的数据链路层" class="headerlink" title="局域网的数据链路层"></a>局域网的数据链路层</h3><ul>
<li><p>局域网的优点</p>
<ul>
<li>具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源</li>
<li>便于系统的扩展和逐渐演变，各设备的位置可灵活调节和改变</li>
<li>提高了系统的可靠性、可用性和生存性</li>
</ul>
</li>
<li><p>局域网按网络拓扑分类</p>
<ul>
<li>星形网</li>
<li>环形网</li>
<li>总线网</li>
</ul>
</li>
<li><p>共享信道技术上的两种方法</p>
<ul>
<li><p>静态划分信道</p>
<ul>
<li>频分复用、时分复用、波分复用和码分复用等，用户只要分配到了信道就不会和其他用户发送冲突。但这种方法代价较高，不适合局域网使用</li>
</ul>
</li>
<li><p>动态媒体接入控制</p>
<ul>
<li><p>随机接入</p>
<ul>
<li>随机接入的特点是所有的用户可随机地发送信息。但如果恰巧有两个或更多但用户在同一时刻发送信息，那么在共享媒体上就要产生碰撞（即发送了冲突），使得这些用户但发送都失败。因此，必须有解决碰撞的网络协议。</li>
</ul>
</li>
<li><p>受控接入</p>
<ul>
<li>受控接入的特点是用户不能随机地发送信息而必须服从一定的控制。这类的典型代表有分散控制的令牌环局域网和集中控制的多点线路探询（polling），或称为轮询。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>IEEE802委员会曾把局域网的数据链路层拆成两个子层，即逻辑链路控制（LLC）子层（与传输媒体无关）和媒体接入控制子层（MAC）子层（与传输媒体有关）。但现在LLC子层已成历史。MAC（Medium Access Control）LLC（Logical Link Control）</p>
</li>
<li><p>计算机与外界局域网的通信要通过通信适配器（或网络适配器），它又称为网络接口卡或网卡。计算机的硬件地址就在适配器的ROM中</p>
</li>
</ul>
<h3 id="CSMA-CD协议"><a href="#CSMA-CD协议" class="headerlink" title="CSMA/CD协议"></a>CSMA/CD协议</h3><ul>
<li><p>协议要点</p>
<ul>
<li><p>多点接入</p>
<ul>
<li>说明这是总线型网络，许多计算机以多点接入的方式连接在一个总线上</li>
</ul>
</li>
<li><p>载波监听</p>
<ul>
<li>载波监听就是检测信道。不管发送前，还是发送中，每个站都必须不停地检测信道</li>
</ul>
</li>
<li><p>碰撞检测</p>
<ul>
<li>就是“便发送边监听”，即适配器边发送数据边检测信道上的信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据</li>
</ul>
</li>
</ul>
</li>
<li><p>总结</p>
<ul>
<li><p>准备发送</p>
<ul>
<li>适配器从网络层获得一个分组，加上以太网的首部和尾部，以组成以太网帧，放入适配器的缓存中。但是发送之前，必须先检测信道</li>
</ul>
</li>
<li><p>检测信道</p>
<ul>
<li>若检测到信道忙，则应不停地检测，一直等待信道转为空闲。若检测到信道空闲，并在96比特时间内信道保持空闲（保证了帧间最小间隔），就发送这个帧。</li>
</ul>
</li>
<li><p>在发送过程中仍不停地检测信道，即网络适配器要边发送边监听</p>
<ul>
<li>发送成功：争用期内一直为检测到碰撞。这个帧肯定能够发送成功。发送完毕后，其他什么也不做。然后回到准备发送的状态。</li>
<li>发送失败：在争用期内检测到碰撞。这时立即停止发送数据，并按规定发送人为干扰信号。适配器接着执行指数退避算法，等待r倍512比特时间后，返回到检测信道。但若重传达16次仍不成功，则停止重传而向上报错</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="集线器"><a href="#集线器" class="headerlink" title="集线器"></a>集线器</h3><ul>
<li>使用集线器物理上是星型网实际，在逻辑上仍然是一个总线网，各站使用的还是CSMA/CD协议</li>
<li>集线器有很多接口，很像一个多接口的转发器</li>
<li>集线器工作在物理层，工作只是简单地转发，不进行碰撞检测</li>
<li>集线器采用了专门的芯片，进行自适应串音回波抵消</li>
</ul>
<h3 id="以太网的MAC层（medium-access-control）"><a href="#以太网的MAC层（medium-access-control）" class="headerlink" title="以太网的MAC层（medium access control）"></a>以太网的MAC层（medium access control）</h3><ul>
<li><p>MAC层的硬件地址</p>
<ul>
<li>硬件地址又称为物理地址或MAC地址</li>
<li>MAC地址固化在适配器的ROM中</li>
</ul>
</li>
<li><p>MAC帧的格式</p>
<ul>
<li><p>第一个字段：6字节长的目的地址</p>
</li>
<li><p>第二个字段：6字节长的源地址</p>
</li>
<li><p>第三个字段：2字节长的类型字段</p>
<ul>
<li>IP数据报：0x0800</li>
<li>Novell IPX：0x8137</li>
</ul>
</li>
<li><p>第四个字段：长度在46到1500字节之间的数据字段</p>
</li>
<li><p>第五个字段：4字节的帧检验序列FCS（使用CRC检验）</p>
</li>
</ul>
</li>
</ul>
<h3 id="扩展的以太网"><a href="#扩展的以太网" class="headerlink" title="扩展的以太网"></a>扩展的以太网</h3><ul>
<li>使用集线器在物理层扩展以太网</li>
<li>交换式集线器常称为以太网交换机或第二层交换机（工作在数据链路层）。他就是一个多接口的网桥，而每个接口都直接与某台主机或另一个集线器相连，且工作在全双工方式。以太网交换机能同时连通许多对的接口，使每一对相互通信的主机都能像独占通信媒体那样，无碰撞地传输数据</li>
</ul>
<p><em>XMind: ZEN - Trial Version</em></p>
]]></content>
  </entry>
  <entry>
    <title>我的博客诞生了</title>
    <url>/2020/ck7xegbuz0004tw962853edll/</url>
    <content><![CDATA[<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul>
<li>macbook pro 2019 </li>
</ul>
<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>下载并安装</p>
<ul>
<li>git</li>
<li>node.js</li>
</ul>
<p><em>tips：如果下载速度过慢，可以找下国内镜像仓库</em><br><em>npm的国内镜像<a href="https://npm.taobao.org/mirrors/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/</a></em><br><em>上面这个网址里也有git的资源</em></p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p><code>$ npm install -g hexo-cli</code></p>
<h3 id="github仓库建立"><a href="#github仓库建立" class="headerlink" title="github仓库建立"></a>github仓库建立</h3><p>仓库名必须满足：<br><code>&lt;用户名&gt;.github.io</code></p>
<h3 id="github-pages部署"><a href="#github-pages部署" class="headerlink" title="github pages部署"></a>github pages部署</h3><ol>
<li>安装hexo-deployer-git<br><code>npm install hexo-deployer-git</code></li>
<li>修改配置文件_config.yml<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delpoy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:github.com&#x2F;&lt;用户名&gt;&#x2F;&lt;用户名&gt;.github.io</span><br><span class="line">  branch:gh-pages</span><br></pre></td></tr></table></figure></li>
<li>运行<code>hexo clean &amp;&amp; hexo deploy</code></li>
<li>查看你的github网站是否更改</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/ck7xegbuk0001tw96bwt6717b/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
